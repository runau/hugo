[{"content":"twitterカード画像自動生成機能は画像を自動生成するだけなので、各記事のheaderにmeta_imageを自力で設定しないといけなかった。\nそこもいい感じにしてくれるようにする。\nhugo newのカスタマイズ hugoでは\nhugo new xx.md とすることで、xxという記事のテンプレートが出来上がる。\nこのテンプレートの設定を変えてみる。\nテンプレートの作成元 テンプレートの作成元のベースになるのは\narchetypes/default.md\nというファイル\nデフォルトだと、こんな感じになっていると思う。\n1 2 3 4 5  --- title: \u0026#34;{{ replace .Name \u0026#34;-\u0026#34; \u0026#34; \u0026#34; | title }}\u0026#34; date: {{ .Date }} draft: true ---   この状態で、hugo newすると、こんなファイルが出来上がる。\n$ hugo new posts/test.md /mnt/c/github/runau/hugo/tweetBlog/content/posts/test.md created 1 2 3 4 5  --- title: \u0026#34;Test\u0026#34; date: 2020-02-17T17:21:17+09:00 draft: true ---   default.mdの{{}}にいい感じの値を埋め込んでくれているのがわかる。\nテンプレートの作成元の編集 ここに、meta_imageの記載を追加する。\n1 2 3 4 5 6  --- title: \u0026#34;{{ replace .Name \u0026#34;-\u0026#34; \u0026#34; \u0026#34; | title }}\u0026#34; date: {{ .Date }} meta_image: \u0026#34;posts/meta_image/{{ replace .Name \u0026#34;-\u0026#34; \u0026#34; \u0026#34; | title }}.png\u0026#34; draft: true ---   で、もう一度hugo new\n$ hugo new posts/test.md /mnt/c/github/runau/hugo/tweetBlog/content/posts/test.md created 1 2 3 4 5 6  --- title: \u0026#34;Test\u0026#34; date: 2020-02-17T17:21:17+09:00 meta_image: \u0026#34;posts/meta_image/Test.png\u0026#34; draft: true ---   できた。\nこれで、このまま記事を書いて、build.shを叩けば、アイキャッチが自動生成＆自動設定される。\ntwitterカード画像自動生成機能の残作業  アイキャッチ更新不要の場合はわざわざ作らない対応 微妙に左上が欠ける問題の解消  独り言 日本酒が飲み放題の夢の世界から帰ってきてしまいました…。\n現実に戻って、晩御飯作ります…。\nご飯食べたら、もうひと作業したいな…\n","description":"","id":0,"section":"posts","tags":null,"title":"hugo newのカスタマイズ　twitterカード画像自動生成機能⑥","uri":"https://encr.jp/blog/posts/20200217_lunch/"},{"content":"昨日作った画像生成スクリプトの残作業を進める\nビルドコマンドと昨日のスクリプトをshでラッピングする 指定したディレクトリ内のファイルに対して、画像生成スクリプトを回し、最後にビルドする。\nいつも忘れるシェルのループの書き方はこの辺を参考に。\nシェルスクリプトのforループでフォルダやファイルを一括処理\nで、作った！\n1 2 3 4 5 6 7 8 9 10 11 12 13  #!/bin/sh dir_path=\u0026#34;content/posts/*\u0026#34; dirs=`find $dir_path -maxdepth 0 -type f -name *.md` for dir in $dirs; do echo $dir python create_meta_image.py $dir done hugo -t zzo   create_meta_image.pyの修正 echo $dirのところ、パスが取れちゃって、\ncontent/posts/20200216_morning.md\nみたいな感じのが取れるから、shで正規表現で抽出するのめんどくさくて、pythonの方を修正。\n1 2 3 4 5  target = sys.argv[1] print(f\u0026#34;target:{target}\u0026#34;) target = target.split(\u0026#34;/\u0026#34;)[-1] target = target.replace(\u0026#34;.md\u0026#34;,\u0026#34;\u0026#34;)   これで、ディレクトリ付き(content/posts/20200216_morning.md)でも、なし(20200216_morning)でも、どっちでもいい感じに処理してくれるはずww\nで、このスクリプト回して、全記事のアイキャッチ更新して、\nはい、今日の朝活おわり！\n朝風呂言って来よう！せっかく温泉来てるしねww\n残作業  アイキャッチ更新不要の場合はわざわざ作らない対応 hugo newした時にmeta_imageを設定する  ","description":"","id":1,"section":"posts","tags":null,"title":"画像生成スクリプトをビルド時に動かす　twitterカード画像自動生成機能⑤","uri":"https://encr.jp/blog/posts/20200217_morning/"},{"content":"朝作ったスクリプトをいい感じで自動で動かす方法を考える！\n朝の記事は こちら\n引数を渡す まずは、引数渡せるようにして、いい感じのファイルを作れるようにする。\nとりあえずファイル名を指定できるようにする。\nimport sys target = sys.argv[1] print(f\u0026quot;target:{target}\u0026quot;) で、\nimg.save(f\u0026quot;content/posts/meta_image/{target}.png\u0026quot;) これで、対象の記事に対してスクリプトが動く\ntargetのmdからタイトルと内容を取得 で、マークダウンを読み取る\nもしかしたら、もっといいベストプラクティスがあるのかもしれないけど…。\nとりあえず、テキストとして読み取って、ヘッダー部分をyamlとして読み込み直す\nこんな感じ？\nimport yaml with open(f'content/posts/{target}.md') as f: md = f.read().split(\u0026quot;---\u0026quot;) header_yaml = md[1] body = md[2] header = yaml.load(header_yaml) title = header[\u0026quot;title\u0026quot;] で、タイトルと、内容を取得\n引数に設定\n実行\nおおお！いいね\n完成(ㅅ´ ˘ `)♡\nちょっと細かいリファクタリングとか、バグ取りとかして、こんな感じ\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69  from PIL import ImageFont, ImageDraw, Image import sys import yaml def add_text_to_image(img, base_text, font_path, font_size, font_color, height, width, line=1, max_length=800, max_height=420): font = ImageFont.truetype(font_path, font_size) draw = ImageDraw.Draw(img) lineCnt = 1 base_text = base_text.strip() base_text = base_text.replace(\u0026#34;\\n\\n\u0026#34;, \u0026#34;\\n\u0026#34;) base_text = base_text[0:150] break_flg = False for lineCnt in range(line): text = base_text.split(\u0026#34;\\n\u0026#34;)[0] position = (width, height) if len(text) == 0: break if lineCnt == line - 1 or \\ height + draw.textsize(text, font=font)[1] \u0026gt; max_height: if draw.textsize(text, font=font)[0] \u0026gt; max_length: # テキストの長さがmax_lengthより小さくなるまで、1文字ずつ削っていく while draw.textsize(text + \u0026#39;…\u0026#39;, font=font)[0] \u0026gt; max_length: text = text[:-1] text = text + \u0026#39;…\u0026#39; break_flg = True else: while draw.textsize(text, font=font)[0] \u0026gt; max_length: text = text[:-1] base_text = base_text.replace(text, \u0026#34;\u0026#34;) base_text = base_text.strip() height = height + draw.textsize(text, font=font)[1] draw.text(position, text, font_color, font=font) print(f\u0026#34;draw:{text}\u0026#34;) if break_flg: break return img, height target = sys.argv[1] print(f\u0026#34;target:{target}\u0026#34;) with open(f\u0026#39;content/posts/{target}.md\u0026#39;) as f: md = f.read().split(\u0026#34;---\u0026#34;) header_yaml = md[1] body = md[2] header = yaml.load(header_yaml) title = header[\u0026#34;title\u0026#34;] base_img_path = \u0026#34;content/posts/meta_image/base.png\u0026#34; base_img = Image.open(base_img_path).copy() font_path = \u0026#34;content/posts/meta_image/meiryo.ttc\u0026#34; font_color = (88, 110, 117) height = 155 width = 30 font_size = 57 line = 3 img, height = add_text_to_image( base_img, title, font_path, font_size, font_color, height, width, line) font_size = 35 height = height + 20 line = 6 img, height = add_text_to_image( img, body, font_path, font_size, font_color, height, width, line) img.save(f\u0026#34;content/posts/meta_image/{target}.png\u0026#34;)   このまま投稿してみる！\n出来たヾ(●´∇｀●)ﾉ\n残タスク  今はmdのテキストをそのまま出力しているので、リンクの中身を臭力しないようにするとか♯をいい感じにするとか。 shでラッピングして、ビルド時にいい感じに自動生成するようにする。 既にイメージができている時は作りなおさずにスキップする  とか\nとりあえず、今日はこんなもん。\nよし、夜鳴きそば食べて来ようwww\n","description":"","id":2,"section":"posts","tags":null,"title":"twitterカード画像自動生成機能を記事ごとに動かす　twitterカード画像自動生成機能④","uri":"https://encr.jp/blog/posts/20200216_lunch/"},{"content":"昨日あれから、寝る前にどうやるか、よく考えた。\nで、思った。\nどうせバッチっぽいの回すなら、jsでなくてよくね？？\nPythonで画像に文字描画 という事でPythonでできないか調べた\n「Python 画像 文字描画」とかで検索\nなんかね、簡単に出来そう！\nよーし、日曜日だし、これから越後湯沢に旅行だけど、気合い入れて作るぞー！！\n先人様がいらっしゃるので、参考にさせて頂く\nPythonで画像を編集したり、文字を入れたりする\nまずベースの画像を作って、文字を重ねる\nベースの画像は、とりあえずこんな感じでいいか？\nで、文字を描画してみる\nとりあえず、↑サイトから取ってきたコードのパスとかサイズとかだけ調整しただけのコードでお試し！\nと思ったけど、フォントファイルがない…\nよく分かんないから、もうネットで探すww\nここにあったのを拾う\nメイリオのフォントファイル\nで、適当において、パスを指定\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  from PIL import ImageFont,ImageDraw,Image def add_text_to_image(img, base_text, font_path, font_size, font_color, height, width,max_length=800): font = ImageFont.truetype(font_path, font_size) draw = ImageDraw.Draw(img) if draw.textsize(text, font=font)[0] \u0026gt; max_length: while draw.textsize(text + \u0026#39;…\u0026#39;, font=font)[0] \u0026gt; max_length: text = text[:-1] text = text + \u0026#39;…\u0026#39; return img title = \u0026#34;titlexxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\u0026#34; font_path = \u0026#34;content/posts/meta_image/meiryo.ttc\u0026#34; font_size = 57 font_color = (88, 110, 117) height = 155 width = 30 path = \u0026#34;content/posts/meta_image/base.png\u0026#34; base_img = Image.open(path).copy() img = add_text_to_image(base_img, title, font_path, font_size, font_color, height, width) img.save(\u0026#34;content/posts/img/create.png\u0026#34;)   うん、いい感じ\n指定行数まで折り返す どうやら、↑のサイトでは、長い文字は切り落としているみたい\nでも、長い文字は折り返したい！\nちょっとコード変更\nこれでlineに指定した行数分折り返してくれる\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36  from PIL import ImageFont,ImageDraw,Image def add_text_to_image(img, base_text, font_path, font_size, font_color, height, width, line,max_length=800): font = ImageFont.truetype(font_path, font_size) draw = ImageDraw.Draw(img) for lineCnt in range(line): print (lineCnt) text = base_text position = (width, height) if lineCnt == line: # テキストの長さがmax_lengthより小さくなるまで、1文字ずつ削っていく while draw.textsize(text + \u0026#39;…\u0026#39;, font=font)[0] \u0026gt; max_length: text = text[:-1] text = text + \u0026#39;…\u0026#39; else: while draw.textsize(text , font=font)[0] \u0026gt; max_length: text = text[:-1] base_text = base_text[1:] height = height + draw.textsize(text , font=font)[1] draw.text(position, text, font_color, font=font) return img title = \u0026#34;titlexxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\u0026#34; font_path = \u0026#34;content/posts/meta_image/meiryo.ttc\u0026#34; font_size = 57 font_color = (88, 110, 117) height = 155 width = 30 path = \u0026#34;content/posts/meta_image/base.png\u0026#34; base_img = Image.open(path).copy() line = 3 img = add_text_to_image(base_img, title, font_path, font_size, font_color, height, width, line) img.save(\u0026#34;content/posts/meta_image/create.png\u0026#34;)   実行\nこんな感じ\nうん、いい感じ\n内容もつくる さっきまで作ってたのはタイトル。\nでその下に、ちょっと文字を小さくして本文を入れたい！\nせっかく関数化してあるしね。もう一回呼び出すように変更。\nで、文字の高さの位置が変わるから、それもリターンするようにする。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50  from PIL import ImageFont, ImageDraw, Image def add_text_to_image(img, base_text, font_path, font_size, font_color, height, width, line=1, max_length=800): font = ImageFont.truetype(font_path, font_size) draw = ImageDraw.Draw(img) lineCnt = 1 for lineCnt in range(line): print(lineCnt) text = base_text position = (width, height) if lineCnt == line - 1: # テキストの長さがmax_lengthより小さくなるまで、1文字ずつ削っていく while draw.textsize(text + \u0026#39;…\u0026#39;, font=font)[0] \u0026gt; max_length: text = text[:-1] text = text + \u0026#39;…\u0026#39; else: while draw.textsize(text, font=font)[0] \u0026gt; max_length: text = text[:-1] base_text = base_text[1:] height = height + draw.textsize(text, font=font)[1] draw.text(position, text, font_color, font=font) return img, height title = \u0026#34;titlexxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\u0026#34; font_path = \u0026#34;/mnt/c/github/runau/hugo/tweetBlog/content/posts/meta_image/meiryo.ttc\u0026#34; font_size = 57 font_color = (88, 110, 117) height = 155 width = 30 path = \u0026#34;/mnt/c/github/runau/hugo/tweetBlog/content/posts/meta_image/base1.png\u0026#34; base_img = Image.open(path).copy() line = 2 img, height = add_text_to_image( base_img, title, font_path, font_size, font_color, height, width, line) title = \u0026#34;bodyxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\u0026#34; font_path = \u0026#34;/mnt/c/github/runau/hugo/tweetBlog/content/posts/meta_image/meiryo.ttc\u0026#34; font_size = 40 font_color = (88, 110, 117) height = height + 20 width = 30 path = \u0026#34;/mnt/c/github/runau/hugo/tweetBlog/content/posts/meta_image/base1.png\u0026#34; base_img = Image.open(path).copy() line = 5 img, height = add_text_to_image( img, title, font_path, font_size, font_color, height, width, line) img.save(\u0026#34;/mnt/c/github/runau/hugo/tweetBlog/content/posts/meta_image/create.png\u0026#34;)   実行\nこんな感じ\nうん、いいね。\n旅行出発の時間だ。\nこのバッチを呼び出すところとか、引数とかそういうのは次の作業で！\n","description":"","id":3,"section":"posts","tags":null,"title":"twitterカード自動生成機能作った　twitterカード画像自動生成機能③","uri":"https://encr.jp/blog/posts/20200216_morning/"},{"content":"朝の続き。\n朝活の後、カラオケオフ会に行ってきましたよw\nうん、やっぱり楽しい！\n歌、上手くなりたいなー…\nさて、twitterカードの画像を自動生成したいというお話。\n完成イメージの方針 大きく二つ\n スクショを取る 画像を作成する  どっちでもいいから、楽な方にしたいんだけど…\nとりあえず両方考える！\nスクショを撮る こんな感じ\nブログの画面をスクショして、画像にして、それをカードに設定したい！\npythonでライブラリあるみたいだから、動的サイトのスクレイピングの要領で、画面表示して、スクショ取ればいいみたい！\nできそう！だけど、lambdaでやるのは現実出来ではないかな…\nま、スクレイピング環境も作りたいから、合わせてecrで対応するのとかもよさげだけど…\nいったんやめよう\n画像を作成する こんな感じ\nキータはね、分かりやすいし可愛いよね\nこういうの作りたい！\nQiitaは imgix\nここでなんかしているらしい…\nでもね、これ、月額10ドルから…\n諦めよう…ww\nでも、なんでもよければ、実は前にワードプレスで作ったんだよね。\nアイキャッチ自動生成ツール\nもう、記事ごとのアイキャッチ設定するのが本当にめんどうだったから、記事投稿時に、タイトルとカテゴリから勝手にアイキャッチ作ってくれるの作ったの\nあれと同じ感じで作れるはず。\ncanvasに描画⇒pngに変換\n画像が作れれば何でもいいんだけれど、全く知らない技術より、一回やったことあるものの方が工数削減のはず！\nとりあえず、この方針で勧める。\nということで 画像作成の方向で…\nタイミング ワードプレスの時は記事保存時に動かしてたんだけど、今回はどうしたもんか…\n  記事書いた後、build前にローカルでshかなんかで作って埋め込む\n  build時に絡める\n  build後にローカルでshかなんかで作って埋め込む\n  s3put時にputイベントで作る\n  html読み込んだ時に作る？できるのか？\n  うむ。\nbuild時に絡めるは一番綺麗だろうけど、私には無理そうだから…\ns3put時にputイベントもなかなか楽しそうだけど…。\nでも一番楽なのは、ビルド前に何か動かすかな。\nとりあえず、その方向で考える\n何を作るか？   全記事を取得⇒画像がなかったら画像作成\n  ビルド時にmetaタグにそれぞれの画像を設定\n  metaタグは、ビルド時に生成されるから、なんとかいい感じの参照をしてくれるようにしないと。\nまずそこから試そう！\nmetaタグを記事ごとに設定 今は、twitterカードの画像は、params.tomlで設定されてて、全記事共通の画像しか参照できない。\nここを変える方法を考える。\nとりあえずmetaタグを設定しているmeta.htmlを眺める。\n………。\nうーん、goさっぱり分らん…。\ngoの勉強から始めなきゃダメなのか…？？\nで、よく分かんないけど、アイキャッチって記事ごとに設定したいもんだし、とりあえず記事のヘッダーに追加してみたw\n1 2 3 4 5  --- title: \u0026#34;Twitterカードの画像の自動生成機能を考える\u0026#34; date: 2020-02-15T19:00:55+09:00 meta_image: \u0026#34;meta_image/20200215_lunch.png\u0026#34; ---   そしたらいい感じにできたw\nわーい//\nそりゃそうだよね。記事ごとに設定しないといけないもんね。\n記事のヘッダーは、params.tomlを上書きする設定ってイメージなのかね。\n最後に いや、ほんと\nマークダウンでブログが書けるって素晴らしさねw\n同じ記事量でも、ワードプレスの時はもっと時間かかってたわー\n毎日3記事upとか、マークダウンだからこそ、できる技ですなwww\n次の記事で自動生成作る！\n","description":"","id":4,"section":"posts","tags":null,"title":"Twitterカードの画像の自動生成機能を考える　twitterカード画像自動生成機能➁","uri":"https://encr.jp/blog/posts/20200215_lunch/"},{"content":"hugoのzzoでtwitterカードを設定する！ 今はこんな感じ…\n可愛くない…\n可愛くしたい！\n画像の自動生成とかしたいんだけど、長くなりそうだから、まずは固定の画像と固定のディスクリプションの追加。\n自動生成は午後にやろうー！\ntwitterカードの種類をラージに twitterカードには種類が4種類あって、ブログで使われるのは2種類\n Summary Card Summary Card with Large Image  細かいことはサルワカさんの↓の記事とか見てもらえればw\nこの人は本当にすごくてw\n3年前に初めてワードプレスでブログ書いた時からお世話になっているww\nサルワカさんブログ\nで、今はSummary Cardだけど、Summary Card with Large Imageにしたいのね。\ncustom-header 1 2  \u0026lt;meta name=\u0026#34;twitter:card\u0026#34; content=\u0026#34;summary_large_image\u0026#34;\u0026gt; \u0026lt;meta content=\u0026#34;@encr\u0026#34; name=\u0026#34;twitter:site\u0026#34; /\u0026gt;   とりあえず追加してみる\nビルドして、clomeで開いて、ソースを確認\nうん、大丈夫そう\nと思ったけど… 1 2 3 4 5 6 7 8 9 10 11 12 13 14  {{ with $.Param \u0026#34;contact\u0026#34; }}\u0026lt;meta name=\u0026#34;contact\u0026#34; content=\u0026#34;{{ . }}\u0026#34;\u0026gt;{{ end }} \u0026lt;meta property=\u0026#34;og:site_name\u0026#34; content=\u0026#34;{{ .Site.Title }}\u0026#34;\u0026gt; \u0026lt;meta property=\u0026#34;og:title\u0026#34; content=\u0026#34;{{ .Title }}\u0026#34;\u0026gt; \u0026lt;meta property=\u0026#34;og:url\u0026#34; content=\u0026#34;{{ .Permalink | absLangURL }}\u0026#34;\u0026gt; \u0026lt;meta property=\u0026#34;og:type\u0026#34; content=\u0026#34;{{ if .IsPage }}article{{ else }}website{{ end }}\u0026#34;\u0026gt; \u0026lt;meta property=\u0026#34;og:description\u0026#34; content=\u0026#34;{{ $.Param \u0026#34;description\u0026#34; }}\u0026#34;\u0026gt; {{ with $.Param \u0026#34;meta_image\u0026#34; }} \u0026lt;meta property=\u0026#34;og:image\u0026#34; content=\u0026#34;{{ . | absURL }}\u0026#34;\u0026gt; \u0026lt;meta property=\u0026#34;og:image:url\u0026#34; content=\u0026#34;{{ . | absURL }}\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;twitter:card\u0026#34; content=\u0026#34;summary_large_image\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;twitter:app:name:iphone\u0026#34; content=\u0026#34;{{ $.Site.Title }}\u0026#34;\u0026gt; \u0026lt;meta property=\u0026#34;twitter:title\u0026#34; content=\u0026#34;{{ $.Param \u0026#34;title\u0026#34; }}\u0026#34;\u0026gt; \u0026lt;meta property=\u0026#34;twitter:description\u0026#34; content=\u0026#34;{{ $.Param \u0026#34;description\u0026#34; }}\u0026#34;\u0026gt; {{ end }}   こんなのあった\nこれ、自力で頑張らなくてもいい奴だな…\nなんかよく分かんないけど、とりあえず\n{{ with $.Param \u0026ldquo;meta_image\u0026rdquo; }}\nに入って欲しいから、params.tomlにmeta_imageでも追加してみる？\n1  meta_image = true   テストビルドして実行\nできたw\nでもよく見ると、画像のアドレスがtrueだわw\nこれ、画像のパス設定するのねw\n画像追加する とりあえず、まずは適当な画像を用意。\nで、これを設定\n1  meta_image = \u0026#34;posts/img/meta-image.png\u0026#34;   よし、ビルドしてアップしてみよう\nよし！\nただ…。\nTwitterに貼ると変わらない…\n反映に時間かかる系かもしれないな。\nそう信じて、一日くらい様子見てみようか…\n次は画像の自動生成する！\n","description":"","id":5,"section":"posts","tags":null,"title":"Twitterカードの設定　twitterカード画像自動生成機能①","uri":"https://encr.jp/blog/posts/20200215_morning/"},{"content":"今日adsense対策しようと思って、とりあえず昨日の夜、無理やり広告タグ貼り付けて審査出すだけだしたんだけど、受かったよねww\n昔のブログは30記事近く書いてやっと審査通ったのに…\n技術ブログはなかなか丸かぶりな記事ないから、甘いのかな？w\nとりあえず、やったこととかまとめる\nhugoのzzoテーマでタグを貼る hugoはmdで記事を書いて、その記事からビルドでhtmlやらjsやらを自動生成してくれるという仕組み。\nさて、どこに何を書いたもんか…\nとなったんだけど、zzoは簡単な方法があった！\n少し、テーマの中身をいじることになる。\nlayouts/partialsの中にhtmlのパーツを置くことができるみたいなので、まず、adsenseのパーツを新規で作る\n1 2  \u0026lt;script async src=\u0026#34;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script data-ad-client=\u0026#34;ca-pub-xxxxxxxxxxxx\u0026#34; async src=\u0026#34;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;   xxxxxは自分のコードに変えてくださいね！\nで、そのパーツを呼び出す。\nzzoはよくできていて、custom-head.htmlに書くだけでいいみたい。\n他のテーマの場合は、っぽいことが書いてあるところに、同じように↓の記述を追加すればOK\n1 2 3  \u0026lt;!--override this file --\u0026gt; \u0026lt;!--Adsense --\u0026gt; {{ partial \u0026#34;google/adsense\u0026#34; . }}   で、ビルドするだけ！\n自動広告 自動広告は↑の記述さえしてしまえば、adsense側で設定するだけでいいから、これでおしまい！\n設定は、adsenseの管理画面⇒広告⇒該当サイトの右端の鉛筆マークでできます。\nただね、hugoは綺麗な自動広告入ってくれないみたい…\nスマホしか自動広告出なくて、\n私の大嫌いな画面全体の広告と、画面下の広告がでているよw\nでね、最近snowflake universityばっか見てたから、snowflakeの宣伝ばっかりwww\nとりあえず、しばらくはこのまま広告出しておくので、よかったら参考にして下さい！\n明日はほどよい感じで広告を入れるか、↑と同じ感じでcustum-headerで、twitterカードの設定をしたいな…\n","description":"","id":6,"section":"posts","tags":null,"title":"hugo/zzoブログでadsense審査通ったw","uri":"https://encr.jp/blog/posts/20200214_night/"},{"content":"実は昨日も頑張ったんだけど…。\nその続き\nhugo/zzoのタイトルとプロフィールを変更\nとりあえず、タイトルは表示されたんだけど、スマホだと見切れてしまうの…。\n絶対ダメでしょww\nカギはやっぱり、_index.mdだと思うんだよね。\n昨日いじっても、何も変化なかったし…。\nなので、こいつが効くまで頑張る！\nエラー 実はね、エラー出てたんだよね…。\n$ hugo server -D ERROR 2020/02/14 12:32:22 svType != tvType; key=hascjklanguage, st=bool, tt=string, sv=true, tv=true Built in 631 ms Error: Error building site: \u0026quot;/mnt/c/github/runau/hugo/tweetBlog/content/_index.md:19:1\u0026quot;: failed to unmarshal YAML: yaml: line 18: did not find expected key で、19行目以降削除したらエラー出なくなったから、ま、textしか使わないしいいか、と思ってたんだけど、\nだめなのかもな…。\nただのyamlの文法エラーかもしれない？\nvsCodeで確認 vscodeでyamlにして、エラー出ないか確認…\n別にでない…\npythonで確認 手軽にyaml読む方法、pythonしかわからんから、pythonで読んでみる。\nimport yaml yml = yaml.load(open(\u0026quot;/mnt/c/github/runau/hugo/tweetBlog/content/header:.yml\u0026quot;, 'r')) $ python Python 3.6.5 (default, Nov 14 2019, 22:52:14) [GCC 7.4.0] on linux Type \u0026quot;help\u0026quot;, \u0026quot;copyright\u0026quot;, \u0026quot;credits\u0026quot; or \u0026quot;license\u0026quot; for more information. \u0026gt;\u0026gt;\u0026gt; import yaml \u0026gt;\u0026gt;\u0026gt; yml = yaml.load(open(\u0026quot;/mnt/c/github/runau/hugo/tweetBlog/content/header:.yml\u0026quot;, 'r')) Traceback (most recent call last): File \u0026quot;\u0026lt;stdin\u0026gt;\u0026quot;, line 1, in \u0026lt;module\u0026gt; File \u0026quot;/home/lisa/.pyenv/versions/3.6.5/lib/python3.6/site-packages/yaml/__init__.py\u0026quot;, line 72, in load return loader.get_single_data() File \u0026quot;/home/lisa/.pyenv/versions/3.6.5/lib/python3.6/site-packages/yaml/constructor.py\u0026quot;, line 35, in get_single_data node = self.get_single_node() File \u0026quot;/home/lisa/.pyenv/versions/3.6.5/lib/python3.6/site-packages/yaml/composer.py\u0026quot;, line 36, in get_single_node document = self.compose_document() File \u0026quot;/home/lisa/.pyenv/versions/3.6.5/lib/python3.6/site-packages/yaml/composer.py\u0026quot;, line 55, in compose_document node = self.compose_node(None, None) File \u0026quot;/home/lisa/.pyenv/versions/3.6.5/lib/python3.6/site-packages/yaml/composer.py\u0026quot;, line 84, in compose_node node = self.compose_mapping_node(anchor) File \u0026quot;/home/lisa/.pyenv/versions/3.6.5/lib/python3.6/site-packages/yaml/composer.py\u0026quot;, line 133, in compose_mapping_node item_value = self.compose_node(node, item_key) File \u0026quot;/home/lisa/.pyenv/versions/3.6.5/lib/python3.6/site-packages/yaml/composer.py\u0026quot;, line 82, in compose_node node = self.compose_sequence_node(anchor) File \u0026quot;/home/lisa/.pyenv/versions/3.6.5/lib/python3.6/site-packages/yaml/composer.py\u0026quot;, line 110, in compose_sequence_node while not self.check_event(SequenceEndEvent): File \u0026quot;/home/lisa/.pyenv/versions/3.6.5/lib/python3.6/site-packages/yaml/parser.py\u0026quot;, line 98, in check_event self.current_event = self.state() File \u0026quot;/home/lisa/.pyenv/versions/3.6.5/lib/python3.6/site-packages/yaml/parser.py\u0026quot;, line 393, in parse_block_sequence_entry \u0026quot;expected \u0026lt;block end\u0026gt;, but found %r\u0026quot; % token.id, token.start_mark) yaml.parser.ParserError: while parsing a block collection in \u0026quot;/mnt/c/github/runau/hugo/tweetBlog/content/header:.yml\u0026quot;, line 2, column 5 expected \u0026lt;block end\u0026gt;, but found '?' in \u0026quot;/mnt/c/github/runau/hugo/tweetBlog/content/header:.yml\u0026quot;, line 3, column 5 \u0026gt;\u0026gt;\u0026gt; うん。怒られた。\nこれやな\nでも、公式サイトから取ってきただけなんだけどなーー\nしょうがない。yamlの勉強しよう\nyaml入門\nふむふむ。インデントか？\n直して再実行\n\u0026gt;\u0026gt;\u0026gt; yml = yaml.load(open(\u0026quot;/mnt/c/github/runau/hugo/tweetBlog/content/header:.yml\u0026quot;, 'r')) \u0026gt;\u0026gt;\u0026gt; 読めた。\n修正後ファイルはこちら\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97  --- header: - type: text height: 200 paddingX: 50 paddingY: 0 align: center title: - tweet blog// subtitle: - ツイート感覚で書く技術ブログ titleColor: # #123456, red titleShadow: false titleFontSize: 44 subtitleColor: # #123456, red subtitleCursive: true subtitleFontSize: 16 spaceBetweenTitleSubtitle: 20 - type: img imageSrc: images/header/background.jpg # your image file path: root/static/images/header/background.jpg imageSize: cover # auto|length|cover|contain|initial|inherit imageRepeat: no-repeat # repeat|repeat-x|repeat-y|no-repeat|initial|inherit imagePosition: center # x% y%| xpos ypos| left top| center bottom| ... height: 235 paddingX: 50 paddingY: 0 align: center title: - tweet blog// subtitle: - ツイート感覚で書く技術ブログ titleColor: titleShadow: false titleFontSize: 44 subtitleColor: subtitleCursive: false subtitleFontSize: 16 spaceBetweenTitleSubtitle: 20 - type: slide height: 235 options: startSlide: 0 auto: 5000 # auto slide delay 5000ms(5sec) draggable: true # slide draggable autoRestart: true # restart after drag finished continuous: true # last to first disableScroll: true stopPropagation: true slide: - paddingX: 50 paddingY: 0 align: left imageSrc: images/header/background.jpg imageSize: cover imageRepeat: no-repeat imagePosition: center title: - header title1 subtitle: - header subtitle1 titleFontSize: 44 subtitleFontSize: 16 spaceBetweenTitleSubtitle: 20 - paddingX: 50 paddingY: 0 align: center imageSrc: images/header/background.jpg imageSize: cover imageRepeat: no-repeat imagePosition: center title: - header title2 subtitle: - header subtitle2 titleFontSize: 44 subtitleFontSize: 16 spaceBetweenTitleSubtitle: 20 - paddingX: 50 paddingY: 0 align: right imageSrc: images/header/background.jpg imageSize: cover imageRepeat: no-repeat imagePosition: center title: - header title3 subtitle: - header subtitle3 titleFontSize: 44 subtitleFontSize: 16 spaceBetweenTitleSubtitle: 20 ---   ビルド再挑戦！ お、きた！\nヘッダーってそっちか！\n微修正して、ビルド＆デプロイ！\nはい、昼活おわり\n","description":"","id":7,"section":"posts","tags":null,"title":"hugo/zzoのカスタムヘッダーを設定","uri":"https://encr.jp/blog/posts/20200214_lunch/"},{"content":"adsenceやろうかと思ったんだけど、先にツイートブログのルール決めたくて考えたww\nツイートブログとは？ ツイート感覚で、適当に書くブログの事\n1記事3000文字。\nとか\n写真たくさん入れる。\nとか\n読者に読みやすく。\nとか\n導線が…。\nとか考えないで書くブログ\nTwitterでの作業報告の代わりに書くブログ\nこのルールを守ると、ツイート数/2が記事数になるはず！！\nツイートブログのルール タイミング   ブログ\n 朝昼晩    ツイート\n 朝昼晩ブログの前後    内容 作業前ツイート  前回作業の記事のリンクを貼って、今回の作業の予定を書く  作業後ツイート  今回記事のリンクを貼って、やり残したこと、次回やりたい事を書く  ブログ  やった事を書く やりたかった事が出来なくてもいい。やりきれなくてもいい  ルール  作業をしたら、必ず1記事あげる 作業をしながら書いていく 進まなかったら、なんで進まなかったのかを書く  何かを試していて時間がかかった 何かを調べていて時間がかかった   タイミングは3回あるけど、毎回やる必要はない。1日1回は必ずする。  こんな感じw\nまだ3日目だけど、フォロワーさん100人くらい増えたw\nお昼も頑張るー！\n","description":"","id":8,"section":"posts","tags":null,"title":"ツイートブログの決まり","uri":"https://encr.jp/blog/posts/20200214_morning/"},{"content":"zzoのヘッダーを変える いまはこんな感じ\nなぜかタイトルがzzo…\nタイトルとロゴくらいは変えないとねww\nHugo Themes customizing\n custom header\nYou may want to change home page header. There are 4 options which is slider, image, text, empty.\nSet param at config/_default/params.toml(homeHeaderType)\nMake _index.md file at root/content/_index.md and copy \u0026amp; paste below.\n params.tomlの設定と、content/_index.mdの追加をしていきます。\nparams.tomlの設定 ん？\n4つから選択？\ntextになってるから、そのままでいいのかな？\n# header homeHeaderType = \u0026quot;text\u0026quot; # text, img, slide content/_index.mdの追加？ --- header: - type: text height: 200 paddingX: 50 paddingY: 0 align: center title: - HUGO subtitle: - The world’s fastest framework for building websites titleColor: # #123456, red titleShadow: false titleFontSize: 44 subtitleColor: # #123456, red subtitleCursive: false subtitleFontSize: 16 spaceBetweenTitleSubtitle: 20 --- 直したけど…\n全く変わらずwww\nparams.tomlを色々変えてみる とりあえず、タイトルを直したいので、色々見てみる。\nこの辺かな？\n1 2 3 4  logoText = \u0026#34;Tweet Blog\u0026#34; # Logo text that appears in the site navigation bar. logoType = \u0026#34;short\u0026#34; # long, short -\u0026gt; short: squre shape includes logo text, long: rectangle shape not includes logo text logo = false #true # Logo that appears in the site navigation bar. description = \u0026#34;つぶやく感じで適当に書く技術ブログ\u0026#34; # for SEO   あと、この辺も。プロフィールも直したい！\n1 2 3 4 5 6 7 8 9  # whoami: usage - home page sidebar, single page bottom of post. all values can be empty myname = \u0026#34;るな\u0026#34; email = \u0026#34;blog@encr.jp\u0026#34; whoami = \u0026#34;エンジニア\u0026#34; bioImageUrl = \u0026#34;images/yui.jpg\u0026#34; # image url like \u0026#34;http//...\u0026#34; or \u0026#34;images/anyfoldername/mybioimage.jpg\u0026#34; If not set, we find a avatar image in root/static/images/whoami/avatar.(png|jpg|svg) useGravatar = false # we use this option highest priority location = \u0026#34;東京\u0026#34; organization = \u0026#34;エンジョイクリエイト\u0026#34; link = \u0026#34;https://encr.jp\u0026#34;   画像はstaticにimagesフォルダを作って、そこに設置。\nあと、おまけで、defaultのカラー変えた。\n1  themeOptions = [\u0026#34;dark\u0026#34;, \u0026#34;light\u0026#34;, \u0026#34;hacker\u0026#34;, \u0026#34;solarized\u0026#34;, \u0026#34;kimbie\u0026#34;] # select options for site color theme   を\n1  themeOptions = [\u0026#34;solarized\u0026#34;, \u0026#34;light\u0026#34;, \u0026#34;hacker\u0026#34;, \u0026#34;dark\u0026#34;, \u0026#34;kimbie\u0026#34;] # select options for site color theme   にかえた。defaultは一個目みたい。\n結果 変わった！\n明日はadsenseの設置頑張りたいなーー\n","description":"","id":9,"section":"posts","tags":null,"title":"hugo/zzoのタイトルとプロフィールを変更","uri":"https://encr.jp/blog/posts/20200213_night/"},{"content":"とりあえずzzo動くようになったけど、プロフィールとかもテンプレのままなので、修正する\nfavicon設定 まず、favicon変える。\nせっかく作ってもらったからね！使いたい♡\nHugo Themes favicon\n言われた通りに設定していく。\n朝は気づかなかったけど、こんなに分かりやすい公式ページがあったみたいww\n If you want to support mobile favicon, use favicon-generator.\nMake favicons from favicon-generator site.\nMake a folder at root/static/favicon\nUnzip the generated favicon to that folder.\nSet the config param useFaviconGenerator to true\n favicon自体は別で既に作ってあるんだけど…。\nとりあえず言うとおりにする。\nfavicon作る 広告たくさんで、ダウンロードボタンが分かりずらいけど、ここ。\nfavicon設置 フォルダ作って、そこにいれる\ncd static mkdir favicon わお、いっぱいできてるww\nこれは、ちゃんとここで作らないとだめだwww\nfavicon設定 で、設定。\nuseFaviconGeneratorをtrueにしろと。\n1 2 3 4 5 6 7  ～略 description = \u0026#34;The Zzo theme for Hugo example site.\u0026#34; # for SEO custom_css = [] # custom_css = [\u0026#34;scss/custom.scss\u0026#34;] and then make file at root/assets/scss/custom.scss custom_js = [] # custom_js = [\u0026#34;js/custom.js\u0026#34;] and then make file at root/assets/js/custom.js useFaviconGenerator = true languagedir = \u0026#34;ltr\u0026#34; # ltr / rtl ～略   できた。\nあれ、怒られたwタイプミスwwww\n$ hugo server -D ERROR 2020/02/13 12:40:00 svType != tvType; key=hascjklanguage, st=bool, tt=string, sv=true, tv=true Error: \u0026quot;/mnt/c/github/runau/hugo/tweetBlog/config/_default/params.toml:7:1\u0026quot;: unmarshal failed: Near line 7 (last key parsed 'useFaviconGenerator'): expected value but found \u0026quot;ture\u0026quot; instead もっかいw\n起動！\nできた！\nでも、ほんとにfaviconだけかい！\nヘッダーは変わらないのね…\nヘッダー設定 ロゴも変えたいし、タイトルも変えたい。\n1  title = \u0026#34;つぶやく感じで適当に書く技術ブログ\u0026#34;   タイトル設定してるのに、なぜかzzo…\nなんでや…\nこれか？\nカスタムヘッダーか？\nHugo Themes customizing\n custom header\nYou may want to change home page header. There are 4 options which is slider, image, text, empty.\nSet param at config/_default/params.toml(homeHeaderType)\nMake _index.md file at root/content/_index.md and copy \u0026amp; paste below.\n params.tomlの設定と、content/_index.mdの追加な\n夜にやろう…\n","description":"","id":10,"section":"posts","tags":null,"title":"hugo/zzoに独自のfaviconを設定","uri":"https://encr.jp/blog/posts/20200213_lunch/"},{"content":"ワードプレスもそうだけど、色々テンプレデザインが落ちてるのはいいよねww\nanankeいいんだけど、もう少しおしゃれにしたいから、可愛いのに変えていく！\nブログっぽくて、多少のカスタマイズが効きそうなものを探すことにした。\nここから好きなデザインを探す！ hugo公式サイトのデザイン集\nzzo この、ザ、ブログって感じのを選択！\nhugo-theme-zzo\n設定方法 とりあえず、何も考えずにthemesの中にclone\ncd themes git clone https://github.com/zzossig/hugo-theme-zzo.git エラー続出…。 むぅ…。\nBuilding sites … ERROR 2020/02/13 07:48:06 render of \u0026quot;home\u0026quot; failed: \u0026quot;/mnt/c/github/runau/hugo/tweetBlog/themes/hugo-theme-zzo/layouts/_default/baseof.html:17:33\u0026quot;: execute of template failed: template: index.html:17:33: executing \u0026quot;index.html\u0026quot; at \u0026lt;index .Site.Params.themeOptions 0\u0026gt;: error calling index: index of untyped nil ERROR 2020/02/13 07:48:06 render of \u0026quot;page\u0026quot; failed: \u0026quot;/mnt/c/github/runau/hugo/tweetBlog/themes/hugo-theme-zzo/layouts/_default/baseof.html:17:33\u0026quot;: execute of template failed: template: _default/single.html:17:33: executing \u0026quot;_default/single.html\u0026quot; at \u0026lt;index .Site.Params.themeOptions 0\u0026gt;: error calling index: index of untyped nil ERROR 2020/02/13 07:48:06 render of \u0026quot;page\u0026quot; failed: \u0026quot;/mnt/c/github/runau/hugo/tweetBlog/themes/hugo-theme-zzo/layouts/_default/baseof.html:17:33\u0026quot;: execute of template failed: template: _default/single.html:17:33: executing \u0026quot;_default/single.html\u0026quot; at \u0026lt;index .Site.Params.themeOptions 0\u0026gt;: error calling index: index of untyped nil ERROR 2020/02/13 07:48:06 render of \u0026quot;page\u0026quot; failed: \u0026quot;/mnt/c/github/runau/hugo/tweetBlog/themes/hugo-theme-zzo/layouts/_default/baseof.html:17:33\u0026quot;: execute of template failed: template: _default/single.html:17:33: executing \u0026quot;_default/single.html\u0026quot; at \u0026lt;index .Site.Params.themeOptions 0\u0026gt;: error calling index: index of untyped nil Built in 11327 ms Error: Error building site: failed to render pages: render of \u0026quot;section\u0026quot; failed: \u0026quot;/mnt/c/github/runau/hugo/tweetBlog/themes/hugo-theme-zzo/layouts/_default/baseof.html:17:33\u0026quot;: execute of template failed: template: _default/list.html:17:33: executing \u0026quot;_default/list.html\u0026quot; at \u0026lt;index .Site.Params.themeOptions 0\u0026gt;: error calling index: index of untyped nil うーん、とりあえず、サブモジュールにしてみる？ git submodule add https://github.com/zzossig/hugo-theme-zzo.git themes/zzo でも変わらず…。\nなんか、カスタマイズが必要系のテーマはconfig的な設定をしないと動かないよう。\nconfigファイルを作る https://zzodocs.netlify.com/docs/configuration/configfiles/\nこの辺の設定してみる。\n動いたみたい。\n$ hugo server -D ERROR 2020/02/13 08:34:46 svType != tvType; key=hascjklanguage, st=bool, tt=string, sv=true, tv=true | EN | KO -------------------+----+----- Pages | 26 | 13 Paginator pages | 0 | 0 Non-page files | 1 | 0 Static files | 70 | 70 Processed images | 0 | 0 Aliases | 3 | 1 Sitemaps | 2 | 1 Cleaned | 0 | 0 Built in 9647 ms Watching for changes in /mnt/c/github/runau/hugo/tweetBlog/{archetypes,content,data,layouts,static,themes} Watching for config changes in /mnt/c/github/runau/hugo/tweetBlog/config.toml, /mnt/c/github/runau/hugo/tweetBlog/config/_default Environment: \u0026quot;development\u0026quot; Serving pages from memory Running in Fast Render Mode. For full rebuilds on change: hugo server --disableFastRender Web Server is available at http://localhost:1313/ (bind address 127.0.0.1) Press Ctrl+C to stop ちょっと色々設定変えなきゃいけなそうだけど、それはまたお昼に\nとりあえず、前のバックアップも上げっぱなし\nanankeバージョン\n","description":"","id":11,"section":"posts","tags":null,"title":"hugoのテーマをzzoに変えてみる","uri":"https://encr.jp/blog/posts/20200213_morning/"},{"content":"バイトメンター.com 今度linebotのハンズオン勉強会しようかな。と思って、何作ろうかなーと思ってたら、これ作りたくなった！\n頑張って作るぞー！\nバイトメンター.comとは？ アプリから誰でも簡単にお助けメンターを呼び出せるという、画期的なサービスですww\n元ネタはこちらww\n龍が如く7　バイトヒーロー.com　始動\nシステム構成 画像埋め込むの大変だったから、今日はここまで…w\n埋め込み方法は、ここを参考にしました。\nhttps://hugo.nakaken88.com/use/image/\n","description":"","id":12,"section":"posts","tags":null,"title":"バイトメンター.com","uri":"https://encr.jp/blog/posts/20200212_night/"},{"content":"hugo初期設定との戦い ミスドランチをしながら、30分で頑張る！\n記事出てこない問題 hugo new posts/20200212_morning.md して、記事ページは作られてるんだけど、\nhugo server -D すると、ちゃんと記事出てくるんだけど、\nhugo -t ananke デプロイすると、記事がない…\ndraft: true 記事ページのヘッダーにこいつがいたせいだった。\n下書きって意味らしく、これが付いていると、デプロイされないらしい！便利！\ncssとか反映されない問題 なんとかデプロイしたけど、cssとか、全く効いてない。\nなんならリンクも効いてない。\nデプロイ後のソース覗くと、リンク先がこんなのになってる…\nhttp://hugo.example.com/posts/xxxxx\n1  baseURL = \u0026#34;https://encr.jp/blog\u0026#34;   個々の設定しないといけないみたい。\n無事cssもきれいに表示\nついでにタイトルとかも変える！ 1 2 3 4 5  baseURL = \u0026#34;https://encr.jp/blog\u0026#34; languageCode = \u0026#34;en-us\u0026#34; title = \u0026#34;つぶやく感じで適当に書く技術ブログ\u0026#34; theme = \u0026#34;ananke\u0026#34; hasCJKLanguage = \u0026#34;true\u0026#34;   SEOのために、トップページへのリンク張る フッダーあたりがいいなー\nと思ったけど、これ、カスタマイズ扱いになってしまうのね…。\n本腰入れてやらないと無理かね？\nやりたいことリストに入れておこ\nとりあえず、google先生にクロールだけでもしてほしいから、リンク貼っておこww\nエンクリ\n","description":"","id":13,"section":"posts","tags":null,"title":"hugo初期設定と戦ってみる","uri":"https://encr.jp/blog/posts/20200212_lunch/"},{"content":"ブログ作った Twitterで今日の積み上げとかやるけど、残らないし、twitterだと細かいこと書けないし、ブログにした\nやった事とか、困ったこととか、ツイート感覚で書いていこうと思う！\nhugoって？ ブログを静的に作れるすごい奴\nしかも、記事をマークダウンで書ける！\n作り方 https://dev.classmethod.jp/cloud/hugo-s3/\nこれをそのままやった\n一部こっちも見ている。\nhttps://dev.classmethod.jp/etc/hugo-super-fast-static-webpage/\nテーマはhugo-unoは上手く動かなかったから、こっちのananke使ってみた\ns3からcloudfrontでroute53で独自ドメインで表示してる。\nこの辺を詳しく書こうとすると、記事アップのハードル上がるから、今回は書かないw\nさ、お風呂入って、会社行こ\n","description":"","id":14,"section":"posts","tags":null,"title":"hugoでつぶやきブログ作った","uri":"https://encr.jp/blog/posts/20200212_morning/"}]