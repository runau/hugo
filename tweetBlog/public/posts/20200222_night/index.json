[{"content":"今更ですが、このブログの仕組みを解説したいと思います。\nサーバーの話 動的webサイト(wordpressなど)の仕組み Wordpressが有名ですね。\n一般的なwebサイトはだいたいこの仕組みで動いています。\nPHP(wordpress),Ruby,java…などで動いているものですね。\nなので、DBもあるレンタルサーバーを借りる必要があります。\nロリポップ！\n一番安いので、↑のロリポップかなと思いますが、それでも月250円かかります…。\nで、この250円のプランは本当によく落ちるので…。\n最低500円のスタンダートプランくらいは欲しいですね…！\n落ちることが多いとSEO下げられるのです…。\n静的webサイト(hugoなど)の仕組み 対して、hugoは、このような仕組みで動いています。\nDBサーバー、アプリケーションサーバーがいらない。\nファイルをおいておくだけでいいんです！\nなので、びっくりするほど安い！\nしかも早い！\n私はawsのs3を使っています。\nこれがね、サーバーレスと言って、まぁ安い！\nDBサーバー、アプリケーションサーバーって、一人一人に用意が必要なんです。\nでも、このファイルサーバーというのは、皆で共有のものになり、一人一人に用意がいらないんです。\nだから、安い！しかも早くて、落ちない！\n今月の私の利用料金↑の絵のroute53が60円。s3が3円です。\nで、当然のことながら、12日間運用して、一度も落ちてません！\nうーん、サーバーレス最高！\n独り言 絵書くの大変だったから、朝活はここまで(´ω｀)\ntwitterbotのバグ修正したら、もう少しサーバーレスのよさについて書いていこうかな\n","description":"","id":0,"section":"posts","tags":["hugo","aws"],"title":"hugoブログの仕組み　なぜ60円でブログが作れるのか？","uri":"https://encr.jp/blog/posts/20200223_morning/"},{"content":"前回の続き。\nこれで最後！自動リツイートを考えます。\nリツイートの仕方 POST statuses/retweet/:id - リツイートを実行する\nこれを使ってみる。\n1 2 3 4 5  response = requests.post( f\u0026#39;https://api.twitter.com/1.1/statuses/retweet/1231087256556859000.json\u0026#39;, auth=getOauth() ).json() print(json.dumps(response, ensure_ascii=False, indent=4))   できた！\n取得したツイートからリプライとリツイートを除外する 前回まで取得していた最近のツイート10個にはリプライとリツイートが含まれる。\nリプライとリツイートをリツイートしたくないので、リツイート対象から除外する。\nオプションを付けるだけでいいみたい。\nツイート取得時にオプションを追加する。\nで、リツイートする時にID必要だから、IDも保持しておくようにする。\n1 2 3 4 5 6 7 8 9 10 11  #最新のツイートを10件取得する option = \u0026#39;count=10\u0026amp;exclude_replies=true\u0026amp;include_rts=false\u0026#39; for idx,r in enumerate(replyList): user_timeline = requests.get( f\u0026#39;https://api.twitter.com/1.1/statuses/user_timeline.json?id={r[\u0026#34;id\u0026#34;]}\u0026amp;{option}\u0026#39;, auth=getOauth() ).json() replyList[idx][\u0026#34;tweetList\u0026#34;] = list(map(lambda x:x[\u0026#34;text\u0026#34;],user_timeline)) replyList[idx][\u0026#34;tweetIdList\u0026#34;] = list(map(lambda x:x[\u0026#34;id\u0026#34;],user_timeline)) print(json.dumps(replyList, ensure_ascii=False, indent=4))   組み合わせる 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152  from requests_oauthlib import OAuth1Session, OAuth1 import requests import json import codecs import time import os import datetime import collections import re OAUTH1 = os.environ[\u0026#39;OAUTH1\u0026#39;] OAUTH2 = os.environ[\u0026#39;OAUTH2\u0026#39;] OAUTH3 = os.environ[\u0026#39;OAUTH3\u0026#39;] OAUTH4 = os.environ[\u0026#39;OAUTH4\u0026#39;] SCREEN_NAME = os.environ[\u0026#39;SCREEN_NAME\u0026#39;] def getOauth(): return OAuth1(OAUTH1, OAUTH2, OAUTH3, OAUTH4) def main(): #自分宛のリプライ最新から10件を全て取得 response = requests.get( f\u0026#39;https://api.twitter.com/1.1/statuses/mentions_timeline.json?count=10\u0026#39;, auth=getOauth() ).json() #その中から、指定した元ツイートに対してのリプライのみに絞り込む in_reply_to_status_id=1231087256556859300 response = list(filter(lambda x:x[\u0026#34;in_reply_to_status_id\u0026#34;] == in_reply_to_status_id,response)) #未リプライの物のみに絞り込む doneList = requests.get( f\u0026#39;https://api.twitter.com/1.1/statuses/user_timeline.json?screen_name={SCREEN_NAME}\u0026#39;, auth=getOauth() ).json() doneList = list(map(lambda x:x[\u0026#34;in_reply_to_status_id\u0026#34;],doneList)) print(json.dumps(doneList, ensure_ascii=False, indent=4)) response = list(filter(lambda x:x[\u0026#34;id\u0026#34;] not in doneList,response)) print(json.dumps(response, ensure_ascii=False, indent=4)) #扱いやすいように成型 replyList = list(map(lambda x:{\u0026#34;id\u0026#34;:x[\u0026#34;user\u0026#34;][\u0026#34;id\u0026#34;],\u0026#34;name\u0026#34;:x[\u0026#34;user\u0026#34;][\u0026#34;name\u0026#34;].split(\u0026#34;@\u0026#34;)[0],\u0026#34;profile\u0026#34;:x[\u0026#34;user\u0026#34;][\u0026#34;description\u0026#34;],\u0026#34;replyId\u0026#34;:x[\u0026#34;id\u0026#34;]},response)) print(json.dumps(replyList, ensure_ascii=False, indent=4)) #最新のツイートを10件取得する option = \u0026#39;count=10\u0026amp;exclude_replies=true\u0026amp;include_rts=false\u0026#39; for idx,r in enumerate(replyList): user_timeline = requests.get( f\u0026#39;https://api.twitter.com/1.1/statuses/user_timeline.json?id={r[\u0026#34;id\u0026#34;]}\u0026amp;{option}\u0026#39;, auth=getOauth() ).json() replyList[idx][\u0026#34;tweetList\u0026#34;] = list(map(lambda x:x[\u0026#34;text\u0026#34;],user_timeline)) replyList[idx][\u0026#34;tweetIdList\u0026#34;] = list(map(lambda x:x[\u0026#34;id\u0026#34;],user_timeline)) print(json.dumps(replyList, ensure_ascii=False, indent=4)) #NGワードチェック print(\u0026#34;NGワードチェック\u0026#34;) ngList=[\u0026#34;融資\u0026#34;,\u0026#34;裏垢\u0026#34;] #ブログを汚したくないから書いていないけど、実際には、あと100ワードくらいありますwww for idx,reply in enumerate(replyList): #プロフィールをチェック if len(list(filter(lambda ng:ng in reply[\u0026#34;profile\u0026#34;],ngList))) or \\ len(list(filter(lambda x:len(list(filter(lambda ng:ng in x,ngList))),reply[\u0026#34;tweetList\u0026#34;]))): print(f\u0026#34;{reply[\u0026#39;name\u0026#39;]}:ng\u0026#34;) replyList.pop(idx) else: print(f\u0026#34;{reply[\u0026#39;name\u0026#39;]}:ok\u0026#34;) #リンク数チェック print(\u0026#34;リンク数チェック\u0026#34;) for idx,reply in enumerate(replyList): #ツイートをチェック if len(list(filter(lambda x:x.count(\u0026#34;http\u0026#34;)\u0026gt;=2,reply[\u0026#34;tweetList\u0026#34;]))): print(f\u0026#34;{reply[\u0026#39;name\u0026#39;]}:ng\u0026#34;) #replyList.pop(idx) else: print(f\u0026#34;{reply[\u0026#39;name\u0026#39;]}:ok\u0026#34;) #重複リンク数チェック print(\u0026#34;重複リンク数チェック\u0026#34;) pattern = \u0026#34;https?://[\\w/:%#\\$\u0026amp;\\?\\(\\)~\\.=\\+\\-]+\u0026#34; for idx,reply in enumerate(replyList): #urlを抽出 ※既に1ツイート内に複数urlある場合は除外しているので、ここに来た時には、必ず1ツイート0～1url #まずurlを含むものだけに絞る urlTweetList =list(filter(lambda x:x.count(\u0026#34;http\u0026#34;)==1,reply[\u0026#34;tweetList\u0026#34;])) print(f\u0026#34;urlTweetList:{urlTweetList}\u0026#34;) #urlを抽出 urlList = list(map(lambda x:re.findall(pattern, x)[0],urlTweetList)) print(f\u0026#34;urlList:{urlList}\u0026#34;) #urlListのそれぞれのurlの出現回数をカウントしてくれる ※要import collections counter = collections.Counter(urlList) print(f\u0026#34;counter:{counter}\u0026#34;) if len(list(filter(lambda x:x \u0026gt;= 3,counter.values()))): print(f\u0026#34;{reply[\u0026#39;name\u0026#39;]}:ng\u0026#34;) replyList.pop(idx) else: print(f\u0026#34;{reply[\u0026#39;name\u0026#39;]}:ok\u0026#34;) warnList = [\u0026#34;RT企画\u0026#34;,\u0026#34;固定ツイート\u0026#34;,\u0026#34;固ツイ\u0026#34;,\u0026#34;リツイート\u0026#34;] #RT企画数チェック print(\u0026#34;RT企画数チェック\u0026#34;) for idx,reply in enumerate(replyList): if len(list(filter(lambda x:len(list(filter(lambda warn:warn in x,warnList))),reply[\u0026#34;tweetList\u0026#34;]))) \u0026gt;= 3: print(f\u0026#34;{reply[\u0026#39;name\u0026#39;]}:ng\u0026#34;) replyList.pop(idx) else: print(f\u0026#34;{reply[\u0026#39;name\u0026#39;]}:ok\u0026#34;) #日本語チェック print(\u0026#34;日本語チェック\u0026#34;) pattern = \u0026#34;[\\u3041-\\u309F]+\u0026#34; #ひらがな for idx,reply in enumerate(replyList): print(re.findall(pattern, reply[\u0026#34;profile\u0026#34;])) if len(re.findall(pattern, reply[\u0026#34;profile\u0026#34;])) == 0: print(f\u0026#34;{reply[\u0026#39;name\u0026#39;]}:ng\u0026#34;) replyList.pop(idx) else: print(f\u0026#34;{reply[\u0026#39;name\u0026#39;]}:ok\u0026#34;) #リプライする for reply in replyList: status = f\u0026#39;{reply[\u0026#34;name\u0026#34;]}さん、企画に参加ありがとうございます！\\nリプの御礼に{reply[\u0026#34;name\u0026#34;]}さんのツイートを最新から3件ほど、RTさせて頂きます♡\\n何回でも参加可能なので、またのご参加お待ちしております！\\n\\n※このツイートはbotからの自動送信です\u0026#39; in_reply_to_status_id = reply[\u0026#34;replyId\u0026#34;] print(f\u0026#34;in_reply_to_status_id:{in_reply_to_status_id} exec\u0026#34;) replyResponse = requests.post( f\u0026#39;https://api.twitter.com/1.1/statuses/update.json\u0026#39;, data={\u0026#34;status\u0026#34;:status ,\u0026#34;in_reply_to_status_id\u0026#34;:in_reply_to_status_id ,\u0026#34;auto_populate_reply_metadata\u0026#34;:True}, auth=getOauth() ).json() print(replyResponse) #リツイートする for idx in range(3): print(f\u0026#39;{reply[\u0026#34;tweetIdList\u0026#34;][idx]}をリツイート\u0026#39;) response = requests.post( f\u0026#39;https://api.twitter.com/1.1/statuses/retweet/{reply[\u0026#34;tweetIdList\u0026#34;][idx]}.json\u0026#39;, auth=getOauth() ).json() print(response) def lambda_handler(event, context): try: main() except: import traceback traceback.print_exc()   でーきーたーーー！！\n企画するのが楽しみ♡\n","description":"","id":1,"section":"posts","tags":["python","twitter","aws"],"title":"自動リツイートする！そして完成！ twitterBot⑥","uri":"https://encr.jp/blog/posts/20200222_night/"},{"content":"前回の続き。\nそれぞれ実装していきます。\nもうね、もはや単純作業ww\n今はこんな感じ\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38  #自分宛のリプライを全て取得 response = requests.get( f\u0026#39;https://api.twitter.com/1.1/statuses/mentions_timeline.json?count=10\u0026#39;, auth=getOauth() ).json() print(json.dumps(response, ensure_ascii=False, indent=4)) #その中から、指定した元ツイートに対してのリプライのみに絞り込む in_reply_to_status_id=1230223693969xxxxxx response = list(filter(lambda x:x[\u0026#34;in_reply_to_status_id\u0026#34;] == in_reply_to_status_id,response)) #自分のツイートを取得 doneList = requests.get( f\u0026#39;https://api.twitter.com/1.1/statuses/user_timeline.json?screen_name={SCREEN_NAME}\u0026#39;, auth=getOauth() ).json() #元ツイートのidの一覧を取得 doneList = list(map(lambda x:x[\u0026#34;in_reply_to_status_id\u0026#34;],doneList)) print(json.dumps(doneList, ensure_ascii=False, indent=4)) #リプライする for r in response: in_reply_to_status_id=r[\u0026#34;id\u0026#34;] if in_reply_to_status_id not in doneList: status = f\u0026#39;{r[\u0026#34;user\u0026#34;][\u0026#34;name\u0026#34;]}さん、おはようございます！\\nリプありがとうございます♡\\n今日も頑張りましょうー！！\\n\\n※このツイートはbotからの自動送信です\u0026#39; print(f\u0026#34;in_reply_to_status_id:{in_reply_to_status_id} exec\u0026#34;) replyResponse = requests.post( f\u0026#39;https://api.twitter.com/1.1/statuses/update.json\u0026#39;, data={\u0026#34;status\u0026#34;:status ,\u0026#34;in_reply_to_status_id\u0026#34;:in_reply_to_status_id ,\u0026#34;auto_populate_reply_metadata\u0026#34;:True}, auth=getOauth() ).json() print(json.dumps(replyResponse, ensure_ascii=False, indent=4)) else: print(f\u0026#34;in_reply_to_status_id:{in_reply_to_status_id} skip\u0026#34;)   リプをくれた人の情報を確認 プロフィールを確認 statuses/mentions_timelineにプロフィールは含まれているはず。\n試してみる\n1 2 3 4 5 6  #自分宛のリプライを全て取得 response = requests.get( f\u0026#39;https://api.twitter.com/1.1/statuses/mentions_timeline.json?count=10\u0026#39;, auth=getOauth() ).json() print(json.dumps(response, ensure_ascii=False, indent=4))   うん、入ってる。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  [ { \u0026#34;text\u0026#34;: \u0026#34;@engineergirl_w こんにちは！\u0026#34;, ～略～ \u0026#34;user\u0026#34;: { \u0026#34;id\u0026#34;: 1218002630783xxxxxx, \u0026#34;id_str\u0026#34;: \u0026#34;1218002630783xxxxxx\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;エンジョイクリエイト\u0026#34;, \u0026#34;screen_name\u0026#34;: \u0026#34;encrjp\u0026#34;, \u0026#34;location\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;linebot、webアプリ、iosアプリなどを開発しています。\u0026#34;, ～略～ } }, { ～略～ ]   リプをくれた人のidが[\u0026ldquo;user\u0026rdquo;][\u0026ldquo;id\u0026rdquo;]でプロフィールが[\u0026ldquo;user\u0026rdquo;][\u0026ldquo;description\u0026rdquo;]みたい。\nだから、[\u0026ldquo;user\u0026rdquo;][\u0026ldquo;description\u0026rdquo;]をチェックしていく。\n最近のツイートを確認 プロフィールだけでは分からないから、その人の最新のツイートを10件確認する。\n確認方法は、前回も使ったstatuses/user_timeline。\n1 2 3 4 5 6  id = 1218002630783xxxxxx doneList = requests.get( f\u0026#39;https://api.twitter.com/1.1/statuses/user_timeline.json?id={id}\u0026#39;, auth=getOauth() ).json() print(json.dumps(doneList, ensure_ascii=False, indent=4))   1 2 3 4 5 6 7 8 9 10  [ { ～略～ \u0026#34;text\u0026#34;: \u0026#34;こんにちは！\u0026#34;, }, { ～略～ \u0026#34;text\u0026#34;: \u0026#34;テスト\u0026#34;, }, {   とれた。\nという事で、プロフィール=[\u0026ldquo;user\u0026rdquo;][\u0026ldquo;description\u0026rdquo;]と、最新のツイート[\u0026ldquo;text\u0026rdquo;]をチェックしていく。\nチェック エロ系 ここに入ってるワードと、個人的に気になるワードを設定。\nそれが含まれたらNGとする。\nちょっと汚くなっちゃったけど…。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33  ngList=[\u0026#34;xxx\u0026#34;,\u0026#34;融資\u0026#34;,\u0026#34;裏垢\u0026#34;] replyList=[{\u0026#34;id\u0026#34;:1218002630783000000, \u0026#34;name\u0026#34;:\u0026#34;twitter花子\u0026#34;, \u0026#34;profile\u0026#34;:\u0026#34;twitter花子です。裏垢女子です\u0026#34;, \u0026#34;tweetList\u0026#34;:[\u0026#34;花子だよ。おはよう\u0026#34;, \u0026#34;花子だよ。こんにちは\u0026#34;] } ,{\u0026#34;id\u0026#34;:1218002630783000000, \u0026#34;name\u0026#34;:\u0026#34;twitter太郎\u0026#34;, \u0026#34;profile\u0026#34;:\u0026#34;twitter太郎です。金持ちだよ\u0026#34;, \u0026#34;tweetList\u0026#34;:[\u0026#34;太郎だよ。おはよう。融資するよ\u0026#34;, \u0026#34;太郎だよ。こんにちは\u0026#34;] } ,{\u0026#34;id\u0026#34;:1218002630783000000, \u0026#34;name\u0026#34;:\u0026#34;twitter次郎\u0026#34;, \u0026#34;profile\u0026#34;:\u0026#34;twitter次郎です。ブロガーです\u0026#34;, \u0026#34;tweetList\u0026#34;:[\u0026#34;次郎だよ。おはよう\u0026#34;, \u0026#34;次郎だよ。こんにちは\u0026#34;] } ] #NGワードチェック for reply in replyList: #プロフィールをチェック if len(list(filter(lambda ng:ng in reply[\u0026#34;profile\u0026#34;],ngList))): print(f\u0026#34;{reply[\u0026#39;name\u0026#39;]}:ng\u0026#34;) #ツイートをチェック elif len(list(filter(lambda x:len(list(filter(lambda ng:ng in x,ngList))),reply[\u0026#34;tweetList\u0026#34;]))): print(f\u0026#34;{reply[\u0026#39;name\u0026#39;]}:ng\u0026#34;) else: print(f\u0026#34;{reply[\u0026#39;name\u0026#39;]}:ok\u0026#34;)   結果\ntwitter花子:ng twitter太郎:ng twitter次郎:ok こんな感じでフィルターかかります。\n怪しい勧誘系 エロ系と同じ感じで進めていく。\n1ツイート内に、複数のリンクがあったらNG 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28  replyList=[{\u0026#34;id\u0026#34;:1218002630783000000, \u0026#34;name\u0026#34;:\u0026#34;twitter花子\u0026#34;, \u0026#34;profile\u0026#34;:\u0026#34;twitter花子です。裏垢女子です\u0026#34;, \u0026#34;tweetList\u0026#34;:[\u0026#34;花子だよ。おはよう。クリックしてね♡　http://xxxx https://xxxx\u0026#34;, \u0026#34;花子だよ。こんにちは\u0026#34;] } ,{\u0026#34;id\u0026#34;:1218002630783000000, \u0026#34;name\u0026#34;:\u0026#34;twitter太郎\u0026#34;, \u0026#34;profile\u0026#34;:\u0026#34;twitter太郎です。金持ちだよ\u0026#34;, \u0026#34;tweetList\u0026#34;:[\u0026#34;太郎だよ。おはよう。融資するよ。クリックしてね♡　http://xxxx \u0026#34;, \u0026#34;太郎だよ。こんにちは\u0026#34;] } ,{\u0026#34;id\u0026#34;:1218002630783000000, \u0026#34;name\u0026#34;:\u0026#34;twitter次郎\u0026#34;, \u0026#34;profile\u0026#34;:\u0026#34;twitter次郎です。ブロガーです\u0026#34;, \u0026#34;tweetList\u0026#34;:[\u0026#34;次郎だよ。おはよう\u0026#34;, \u0026#34;次郎だよ。こんにちは\u0026#34;] } ] #リンク数チェック for reply in replyList: #ツイートをチェック if len(list(filter(lambda x:x.count(\u0026#34;http\u0026#34;)\u0026gt;=2,reply[\u0026#34;tweetList\u0026#34;]))): print(f\u0026#34;{reply[\u0026#39;name\u0026#39;]}:ng\u0026#34;) else: print(f\u0026#34;{reply[\u0026#39;name\u0026#39;]}:ok\u0026#34;)   結果\ntwitter花子:ng twitter太郎:ok twitter次郎:ok うん、いい感じ。\n10ツイート通して、同じリンクが3つ以上あったらNG う、ちょっとめんどくさくなってきた…。\nなんか、練習問題みたい…\nちょっと、無理やり色々やってしまったから、コメントとprint多めにしておきましたw\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34  replyList=[{\u0026#34;id\u0026#34;:1218002630783000000, \u0026#34;name\u0026#34;:\u0026#34;twitter花子\u0026#34;, \u0026#34;profile\u0026#34;:\u0026#34;twitter花子です。裏垢女子です\u0026#34;, \u0026#34;tweetList\u0026#34;:[\u0026#34;花子だよ。おはよう。クリックしてね♡　http://xxxx1\u0026#34;, \u0026#34;花子だよ。こんにちは。クリックしてね♡　http://xxxx1\u0026#34;, \u0026#34;花子だよ。おやすみ。クリックしてね♡　http://xxxx1\u0026#34;, \u0026#34;花子だよ。おはよう。クリックしてね♡\u0026#34;] } ,{\u0026#34;id\u0026#34;:1218002630783000000, \u0026#34;name\u0026#34;:\u0026#34;twitter太郎\u0026#34;, \u0026#34;profile\u0026#34;:\u0026#34;twitter太郎です。金持ちだよ\u0026#34;, \u0026#34;tweetList\u0026#34;:[\u0026#34;太郎だよ。おはよう。融資するよ。クリックしてね　http://xxxx1 \u0026#34;, \u0026#34;太郎だよ。こんにちは。クリックしてね　http://xxxx1\u0026#34;, \u0026#34;太郎だよ。こんにちは。クリックしてね　http://xxxx2\u0026#34;] } ] pattern = \u0026#34;https?://[\\w/:%#\\$\u0026amp;\\?\\(\\)~\\.=\\+\\-]+\u0026#34; #リンク数チェック for reply in replyList: #urlを抽出 ※既に1ツイート内に複数urlある場合は除外しているので、ここに来た時には、必ず1ツイート0～1url #まずurlを含むものだけに絞る urlTweetList =list(filter(lambda x:x.count(\u0026#34;http\u0026#34;)==1,reply[\u0026#34;tweetList\u0026#34;])) print(f\u0026#34;urlTweetList:{urlTweetList}\u0026#34;) #urlを抽出 urlList = list(map(lambda x:re.findall(pattern, x)[0],urlTweetList)) print(f\u0026#34;urlList:{urlList}\u0026#34;) #urlListのそれぞれのurlの出現回数をカウントしてくれる ※要import collections counter = collections.Counter(urlList) print(f\u0026#34;counter:{counter}\u0026#34;) if len(list(filter(lambda x:x \u0026gt;= 3,counter.values()))): print(f\u0026#34;{reply[\u0026#39;name\u0026#39;]}:ng\u0026#34;) else: print(f\u0026#34;{reply[\u0026#39;name\u0026#39;]}:ok\u0026#34;)   結果\n$ python test.py tweetList:['花子だよ。おはよう。クリックしてね♡\\u3000http://xxxx1', '花子だよ。こんにちは。クリックしてね♡\\u3000http://xxxx1', '花子だよ。おやすみ。クリックしてね♡\\u3000http://xxxx1'] urlList:['http://xxxx1', 'http://xxxx1', 'http://xxxx1'] counter:Counter({'http://xxxx1': 3}) twitter花子:ng tweetList:['太郎だよ。おはよう。融資するよ。クリックしてね\\u3000http://xxxx1 ', '太郎だよ。こんにちは。クリックしてね\\u3000http://xxxx1', '太郎だよ。こんにちは。クリックしてね\\u3000http://xxxx2'] urlList:['http://xxxx1', 'http://xxxx1', 'http://xxxx2'] counter:Counter({'http://xxxx1': 2, 'http://xxxx2': 1}) twitter太郎:ok 10ツイート中、リツイート企画みたいな内容のツイートが3つ以上あったらNG ↑と、NGワードのとほぼ同じ感じで\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  replyList=[{\u0026#34;id\u0026#34;:1218002630783000000, \u0026#34;name\u0026#34;:\u0026#34;twitter花子\u0026#34;, \u0026#34;profile\u0026#34;:\u0026#34;twitter花子です。裏垢女子です\u0026#34;, \u0026#34;tweetList\u0026#34;:[\u0026#34;花子だよ。おはよう。クリックしてね♡　#RT企画 http://xxxx1\u0026#34;, \u0026#34;花子だよ。こんにちは。クリックしてね♡ 固ツイリツイートするよ！　http://xxxx1\u0026#34;, \u0026#34;花子だよ。おやすみ。クリックしてね♡　#RT企画　http://xxxx1\u0026#34;, \u0026#34;花子だよ。おはよう。クリックしてね♡\u0026#34;] } ,{\u0026#34;id\u0026#34;:1218002630783000000, \u0026#34;name\u0026#34;:\u0026#34;twitter太郎\u0026#34;, \u0026#34;profile\u0026#34;:\u0026#34;twitter太郎です。金持ちだよ\u0026#34;, \u0026#34;tweetList\u0026#34;:[\u0026#34;太郎だよ。おはよう。融資するよ。クリックしてね　http://xxxx1 \u0026#34;, \u0026#34;太郎だよ。こんにちは。クリックしてね　#RT企画　http://xxxx1\u0026#34;, \u0026#34;太郎だよ。こんにちは。クリックしてね　http://xxxx2\u0026#34;] } ] warnList = [\u0026#34;RT企画\u0026#34;,\u0026#34;固定ツイート\u0026#34;,\u0026#34;固ツイ\u0026#34;,\u0026#34;リツイート\u0026#34;] #RT企画数チェック for reply in replyList: if len(list(filter(lambda x:len(list(filter(lambda warn:warn in x,warnList))),reply[\u0026#34;tweetList\u0026#34;]))) \u0026gt;= 3: print(f\u0026#34;{reply[\u0026#39;name\u0026#39;]}:ng\u0026#34;) else: print(f\u0026#34;{reply[\u0026#39;name\u0026#39;]}:ok\u0026#34;)   結果\n$ python test.py twitter花子:ng twitter太郎:ok 日本語じゃない系 ふぅ。\n最後。\nこれは簡単。プロフィールに日本語が含まれてなかったらNG\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  replyList=[{\u0026#34;id\u0026#34;:1218002630783000000, \u0026#34;name\u0026#34;:\u0026#34;twitter花子\u0026#34;, \u0026#34;profile\u0026#34;:\u0026#34;twitter花子です。裏垢女子です\u0026#34;, \u0026#34;tweetList\u0026#34;:[\u0026#34;花子だよ。おはよう。クリックしてね♡　#RT企画 http://xxxx1\u0026#34;] } ,{\u0026#34;id\u0026#34;:1218002630783000000, \u0026#34;name\u0026#34;:\u0026#34;twitter太郎\u0026#34;, \u0026#34;profile\u0026#34;:\u0026#34;my name is twitter taro!!\u0026#34;, \u0026#34;tweetList\u0026#34;:[\u0026#34;太郎だよ。おはよう。融資するよ。クリックしてね　http://xxxx1 \u0026#34;] } ] #日本語チェック pattern = \u0026#34;[\\u3041-\\u309F]+\u0026#34; #ひらがな for reply in replyList: print(re.findall(pattern, reply[\u0026#34;profile\u0026#34;])) if len(re.findall(pattern, reply[\u0026#34;profile\u0026#34;])) == 0: print(f\u0026#34;{reply[\u0026#39;name\u0026#39;]}:ng\u0026#34;) else: print(f\u0026#34;{reply[\u0026#39;name\u0026#39;]}:ok\u0026#34;)   結果\n['です', 'です'] twitter花子:ok [] twitter太郎:ng くっつける ふぅ。できた。\n疲れた…。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140  from requests_oauthlib import OAuth1Session, OAuth1 import requests import json import codecs import time import os import datetime import collections import re OAUTH1 = os.environ[\u0026#39;OAUTH1\u0026#39;] OAUTH2 = os.environ[\u0026#39;OAUTH2\u0026#39;] OAUTH3 = os.environ[\u0026#39;OAUTH3\u0026#39;] OAUTH4 = os.environ[\u0026#39;OAUTH4\u0026#39;] SCREEN_NAME = os.environ[\u0026#39;SCREEN_NAME\u0026#39;] def getOauth(): return OAuth1(OAUTH1, OAUTH2, OAUTH3, OAUTH4) def main(): #自分宛のリプライ最新から10件を全て取得 response = requests.get( f\u0026#39;https://api.twitter.com/1.1/statuses/mentions_timeline.json?count=10\u0026#39;, auth=getOauth() ).json() #その中から、指定した元ツイートに対してのリプライのみに絞り込む in_reply_to_status_id=1231087256556000000 response = list(filter(lambda x:x[\u0026#34;in_reply_to_status_id\u0026#34;] == in_reply_to_status_id,response)) #未リプライの物のみに絞り込む doneList = requests.get( f\u0026#39;https://api.twitter.com/1.1/statuses/user_timeline.json?screen_name={SCREEN_NAME}\u0026#39;, auth=getOauth() ).json() doneList = list(map(lambda x:x[\u0026#34;in_reply_to_status_id\u0026#34;],doneList)) print(json.dumps(doneList, ensure_ascii=False, indent=4)) response = list(filter(lambda x:x[\u0026#34;id\u0026#34;] not in doneList,response)) print(json.dumps(response, ensure_ascii=False, indent=4)) #扱いやすいように成型 replyList = list(map(lambda x:{\u0026#34;id\u0026#34;:x[\u0026#34;user\u0026#34;][\u0026#34;id\u0026#34;],\u0026#34;name\u0026#34;:x[\u0026#34;user\u0026#34;][\u0026#34;name\u0026#34;],\u0026#34;profile\u0026#34;:x[\u0026#34;user\u0026#34;][\u0026#34;description\u0026#34;]},response)) print(json.dumps(replyList, ensure_ascii=False, indent=4)) for idx,r in enumerate(replyList): user_timeline = requests.get( f\u0026#39;https://api.twitter.com/1.1/statuses/user_timeline.json?id={r[\u0026#34;id\u0026#34;]}\u0026amp;count=10\u0026#39;, auth=getOauth() ).json() replyList[idx][\u0026#34;tweetList\u0026#34;] = list(map(lambda x:x[\u0026#34;text\u0026#34;],user_timeline)) print(json.dumps(replyList, ensure_ascii=False, indent=4)) #NGワードチェック print(\u0026#34;NGワードチェック\u0026#34;) ngList=[\u0026#34;xxx\u0026#34;,\u0026#34;融資\u0026#34;,\u0026#34;裏垢\u0026#34;] for idx,reply in enumerate(replyList): #プロフィールをチェック if len(list(filter(lambda ng:ng in reply[\u0026#34;profile\u0026#34;],ngList))) or \\ len(list(filter(lambda x:len(list(filter(lambda ng:ng in x,ngList))),reply[\u0026#34;tweetList\u0026#34;]))): print(f\u0026#34;{reply[\u0026#39;name\u0026#39;]}:ng\u0026#34;) replyList.pop(idx) else: print(f\u0026#34;{reply[\u0026#39;name\u0026#39;]}:ok\u0026#34;) #リンク数チェック print(\u0026#34;リンク数チェック\u0026#34;) for idx,reply in enumerate(replyList): #ツイートをチェック if len(list(filter(lambda x:x.count(\u0026#34;http\u0026#34;)\u0026gt;=2,reply[\u0026#34;tweetList\u0026#34;]))): print(f\u0026#34;{reply[\u0026#39;name\u0026#39;]}:ng\u0026#34;) #replyList.pop(idx) else: print(f\u0026#34;{reply[\u0026#39;name\u0026#39;]}:ok\u0026#34;) #重複リンク数チェック print(\u0026#34;重複リンク数チェック\u0026#34;) pattern = \u0026#34;https?://[\\w/:%#\\$\u0026amp;\\?\\(\\)~\\.=\\+\\-]+\u0026#34; for idx,reply in enumerate(replyList): #urlを抽出 ※既に1ツイート内に複数urlある場合は除外しているので、ここに来た時には、必ず1ツイート0～1url #まずurlを含むものだけに絞る urlTweetList =list(filter(lambda x:x.count(\u0026#34;http\u0026#34;)==1,reply[\u0026#34;tweetList\u0026#34;])) print(f\u0026#34;urlTweetList:{urlTweetList}\u0026#34;) #urlを抽出 urlList = list(map(lambda x:re.findall(pattern, x)[0],urlTweetList)) print(f\u0026#34;urlList:{urlList}\u0026#34;) #urlListのそれぞれのurlの出現回数をカウントしてくれる ※要import collections counter = collections.Counter(urlList) print(f\u0026#34;counter:{counter}\u0026#34;) if len(list(filter(lambda x:x \u0026gt;= 3,counter.values()))): print(f\u0026#34;{reply[\u0026#39;name\u0026#39;]}:ng\u0026#34;) replyList.pop(idx) else: print(f\u0026#34;{reply[\u0026#39;name\u0026#39;]}:ok\u0026#34;) warnList = [\u0026#34;RT企画\u0026#34;,\u0026#34;固定ツイート\u0026#34;,\u0026#34;固ツイ\u0026#34;,\u0026#34;リツイート\u0026#34;] #RT企画数チェック print(\u0026#34;RT企画数チェック\u0026#34;) for idx,reply in enumerate(replyList): if len(list(filter(lambda x:len(list(filter(lambda warn:warn in x,warnList))),reply[\u0026#34;tweetList\u0026#34;]))) \u0026gt;= 3: print(f\u0026#34;{reply[\u0026#39;name\u0026#39;]}:ng\u0026#34;) replyList.pop(idx) else: print(f\u0026#34;{reply[\u0026#39;name\u0026#39;]}:ok\u0026#34;) #日本語チェック print(\u0026#34;日本語チェック\u0026#34;) pattern = \u0026#34;[\\u3041-\\u309F]+\u0026#34; #ひらがな for idx,reply in enumerate(replyList): print(re.findall(pattern, reply[\u0026#34;profile\u0026#34;])) if len(re.findall(pattern, reply[\u0026#34;profile\u0026#34;])) == 0: print(f\u0026#34;{reply[\u0026#39;name\u0026#39;]}:ng\u0026#34;) replyList.pop(idx) else: print(f\u0026#34;{reply[\u0026#39;name\u0026#39;]}:ok\u0026#34;) #リプライする for r in response: status = f\u0026#39;{r[\u0026#34;user\u0026#34;][\u0026#34;name\u0026#34;]}さん、企画に参加ありがとうございます！\\nリプの御礼に{r[\u0026#34;user\u0026#34;][\u0026#34;name\u0026#34;]}さんのツイートを3件ほど、リツイートさせて頂きます♡\\n\\n※このツイートはbotからの自動送信です\u0026#39; in_reply_to_status_id=r[\u0026#34;id\u0026#34;] print(f\u0026#34;in_reply_to_status_id:{in_reply_to_status_id} exec\u0026#34;) replyResponse = requests.post( f\u0026#39;https://api.twitter.com/1.1/statuses/update.json\u0026#39;, data={\u0026#34;status\u0026#34;:status ,\u0026#34;in_reply_to_status_id\u0026#34;:in_reply_to_status_id ,\u0026#34;auto_populate_reply_metadata\u0026#34;:True}, auth=getOauth() ).json() print(json.dumps(replyResponse, ensure_ascii=False, indent=4)) def lambda_handler(event, context): try: main() except: import traceback traceback.print_exc()   独り言 ふぅ。疲れた…。\nあとは、リツイートするだけ。\nでもそろそろフォロワー5000人行ってしまいそう…。\n間に合うかな…。\n少し休憩したら続き頑張ろう…。\n","description":"","id":2,"section":"posts","tags":["python","twitter","aws"],"title":"変なアカウントをブロックする[実装編] twitterBot⑤","uri":"https://encr.jp/blog/posts/20200222_lunch/"},{"content":"前回の続き。\nリプをくれた人に対して御礼をするっていう企画用のbotを進めていきます。\nリプをくれた人のプロフィールを確認 リプをくれた人に御礼のリツイートをするっていう企画なんだけど、変なアカウントの拡散はしたくない。\nエロ系、怪しい勧誘系、あと日本語じゃない系\n独断と偏見でフィルターかけていきます。\nまずは定義というか、どうフィルター書けるかを決めていきます。\nエロ系 グーグルクロール様にインデックス登録されそうだから、ブログに直では書かないんだけども、ありがちなワードを禁止リストに設定していく。\nあ、いや、検索してみようかな？\nう…違う…\nこっちだねww\nで、このへんとか見ていく。\nうーん。なんか違う気もするけど…。\nとりあえずこの辺の文字を過去10ツイート＆プロフィールに入れてなければ、エロ垢ではないとみなしてあげましょうかね？\n怪しい勧誘系 これがね。難しい！\nほんとにね、AIが必要ですわよ。\nなんちゃらビジネスで年収1000万円！とかいうやつね。\n真面目に頑張ってるブロガーさんならお金の話してようが、宣伝だろうが広告だろうがブロックしたくないけど、嘘ばっかりの勧誘ならブロックしたい…\nので！\n独断と偏見で、頑張ってるか、頑張ってないか。で判断することにした！\n過去10ツイートをさかのぼって、\n①1ツイート内に、複数のリンクがあったらNG\n②10ツイート通して、同じリンクが3つ以上あったらNG\n頑張ってるブロガーさんは、同じリンクを何度も貼らないでしょう？という偏見www\n③10ツイート中、リツイート企画みたいな内容のツイートが3つ以上あったらNG\nあと、これは完全な私の好みですが、リツイート企画ばっかりやっている人も好きでないので…。\nとりあえず、このくらいの緩さで初めてみる。\nやりながら条件厳しくしたりしていこう！\n日本語じゃない系 これは簡単プロフィールに日本語が含まれてなかったらNG\n独り言 よし、朝活終わり！\n三日坊主の私が、かれこれなんと11日目ですよ。\n11日目で、これが26記事目です。\n我ながら、よく頑張ってると思うww\nここまで続けられたらね。このまま1年位は頑張りたい！\n1年間。毎日2記事上げていったら700記事かー\nうん、頑張ろう！整体行ってきます//\n","description":"","id":3,"section":"posts","tags":["python","twitter","aws"],"title":"変なアカウントをブロックする twitterBot④","uri":"https://encr.jp/blog/posts/20200222_morning/"},{"content":"イベントでLTしてきました。\n ちなみにショートコードのうめこみはこちらを参考にさせて頂きました！\n余裕があったら、記事にします！\n今日はこれだけww\n","description":"","id":4,"section":"posts","tags":["aws","hugo","aws"],"title":"lineBot作ったら売れた話","uri":"https://encr.jp/blog/posts/20200221_night/"},{"content":"やばい！今日の夜のイベントのLT資料終わってない！\nアーキテクチャ図、速攻で作らないと💦\nいつもブログでは、mdで書けるアーキ図使ってるんだけど、パワポだからね。\nちゃんと書こう。\nツールを探す AWS 公式アイコンセット\nなんか色々あるみたい。\n立体より平面が好きなのと、簡単そうなので、draw.ioを選択。\ndraw.io\ndraw.io なんか、色々使いこなせてない感はあるけど、時間ないからもうこんな感じでいいや\nサービス引っ張ってきて、線引いただけ。\nサービス名書いているのと書いてないのある…\n今度余裕あるときに直そう。\n完成したら、save asでローカルにdrawioファイルが保存できる。\nこれを持っておけば、続きから編集とかできるみたい。\n出力はExport asでpngとかに出力できる。\n完成 完成したのはこちら\nうーん、お昼は短いねぇ。\nイベント向かう電車の中で仕上げしましょうかねww\n","description":"","id":5,"section":"posts","tags":["aws","draw.io"],"title":"パワポ資料用にアーキテクチャ図書く draw.io","uri":"https://encr.jp/blog/posts/20200221_lunch/"},{"content":"昼の記事の続き！\nなぜか自分にはリプライできるのに、他人にはリプライできない問題…。\n色々検索したんだけど、有益な情報が見つからず…。\n公式ドキュメント 初心に戻って公式リファレンスをよく読むことに。\n公式リファレンス\n公式リファレンスのin_reply_to_status_idの欄。\n The ID of an existing status that the update is in reply to. Note: This parameter will be ignored unless the author of the Tweet this parameter references is mentioned within the status text. Therefore, you must include @username , where username is the author of the referenced Tweet, within the update.\n 注目すべきはこのNoteの部分。\n要約すると、\nin_reply_to_status_idを使う場合は、必ずアテンション(@ユーザー名)をツイート内容に含んでくださいね。\nつけないと、in_reply_to_status_idは無視されますよ。\nとのこと…。\n自分へのリプライの時はアテンションなくても追加のツイートみたいな扱いでつぶやけてただけっぽい。\n全く…。\n無駄な時間を過ごしたぜ…。\nアテンションをつける で、アテンションつけようかと思ったんだけど、つけなくても、アテンションの代わりに、auto_populate_reply_metadataってやつをtrueにすればいいみたい。\n If set to true and used with in_reply_to_status_id, leading @mentions will be looked up from the original Tweet, and added to the new Tweet from there. This wil append @mentions into the metadata of an extended Tweet as a reply chain grows, until the limit on @mentions is reached. In cases where the original Tweet has been deleted, the reply will fail.\n で、やってみる。\n1 2 3 4 5 6 7 8 9 10 11  status = f\u0026#39;おはようございます！\\n※このツイートはbotからの自動送信です\u0026#39; in_reply_to_status_id = 1230251616160xxxxxx print(f\u0026#34;in_reply_to_status_id:{in_reply_to_status_id}\u0026#34;) response = requests.post( f\u0026#39;https://api.twitter.com/1.1/statuses/update.json\u0026#39;, data={\u0026#34;status\u0026#34;:status ,\u0026#34;in_reply_to_status_id\u0026#34;:in_reply_to_status_id ,\u0026#34;auto_populate_reply_metadata\u0026#34;:True}, auth=getOauth() ).json() print(json.dumps(response, ensure_ascii=False, indent=4))   結果は…\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  { \u0026#34;created_at\u0026#34;: \u0026#34;Wed Feb 19 22:37:16 +0000 2020\u0026#34;, \u0026#34;id\u0026#34;: 1230260085839xxxxxx, \u0026#34;id_str\u0026#34;: \u0026#34;1230260085839xxxxxx\u0026#34;, \u0026#34;text\u0026#34;: \u0026#34;@xxxxx おはようございます！\\n※このツイートはbotからの自動送信です\u0026#34;, ～略～ { \u0026#34;screen_name\u0026#34;: \u0026#34;xxxx\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;xxxxx\u0026#34;, \u0026#34;id\u0026#34;: 1218002630783xxxxxx, \u0026#34;id_str\u0026#34;: \u0026#34;1218002630783xxxxxx\u0026#34;, } }, \u0026#34;in_reply_to_status_id\u0026#34;: 1230251616160xxxxxx, ～略～   入ったーーー！\nメンションも勝手に入ったし、in_reply_to_status_idも設定された！\nよし、次\nリプライ済のものは無視する これが結構大変そう…。\n自分のツイート取ってきて、リプライしてるかどうか確認しましょうかね？\n最初の方にも使ったこれ。\n1 2 3 4  response = requests.get( f\u0026#39;https://api.twitter.com/1.1/statuses/user_timeline.json?screen_name={SCREEN_NAME}\u0026#39;, auth=getOauth() ).json()   で、取ってきた中身から、リプライ元のidを取得\nlistの中のdictの中のin_reply_to_status_idを取ってくる\n1 2 3 4 5  response = requests.get( f\u0026#39;https://api.twitter.com/1.1/statuses/user_timeline.json?screen_name={SCREEN_NAME}\u0026#39;, auth=getOauth() ).json() response = list(map(lambda x:x[\u0026#34;in_reply_to_status_id\u0026#34;],response))   [ 1230251616160xxxxxx, null, null, 1230232810620xxxxxx, null, 1230232810620xxxxxx, 1230234142802xxxxxx, ～略～ リプライ対象がここに含まれてたら無視ってしましょうかね。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38  #自分宛のリプライを全て取得 response = requests.get( f\u0026#39;https://api.twitter.com/1.1/statuses/mentions_timeline.json?count=10\u0026#39;, auth=getOauth() ).json() print(json.dumps(response, ensure_ascii=False, indent=4)) #その中から、指定した元ツイートに対してのリプライのみに絞り込む response = list(filter(lambda x:x[\u0026#34;in_reply_to_status_id\u0026#34;] == in_reply_to_status_id,response)) #自分のツイートを取得 in_reply_to_status_id=1230223693969xxxxxx doneList = requests.get( f\u0026#39;https://api.twitter.com/1.1/statuses/user_timeline.json?screen_name={SCREEN_NAME}\u0026#39;, auth=getOauth() ).json() #元ツイートのidの一覧を取得 doneList = list(map(lambda x:x[\u0026#34;in_reply_to_status_id\u0026#34;],doneList)) print(json.dumps(doneList, ensure_ascii=False, indent=4)) #リプライする for r in response: in_reply_to_status_id=r[\u0026#34;id\u0026#34;] if in_reply_to_status_id not in doneList: status = f\u0026#39;{r[\u0026#34;user\u0026#34;][\u0026#34;name\u0026#34;]}さん、おはようございます！\\nリプありがとうございます♡\\n今日も頑張りましょうー！！\\n\\n※このツイートはbotからの自動送信です\u0026#39; print(f\u0026#34;in_reply_to_status_id:{in_reply_to_status_id} exec\u0026#34;) replyResponse = requests.post( f\u0026#39;https://api.twitter.com/1.1/statuses/update.json\u0026#39;, data={\u0026#34;status\u0026#34;:status ,\u0026#34;in_reply_to_status_id\u0026#34;:in_reply_to_status_id ,\u0026#34;auto_populate_reply_metadata\u0026#34;:True}, auth=getOauth() ).json() print(json.dumps(replyResponse, ensure_ascii=False, indent=4)) else: print(f\u0026#34;in_reply_to_status_id:{in_reply_to_status_id} skip\u0026#34;)   できた！\nevent設定 最後にcloudWatchイベントを追加して…\n完成！\n","description":"","id":6,"section":"posts","tags":["python","twitter","aws"],"title":"特定のリプに自動リプライする twitterBot③","uri":"https://encr.jp/blog/posts/20200220_night/"},{"content":"朝、とりあえず適当な自分のツイートにリプライするまでできた。\nでも自動リプライしたいのはこれじゃないんだよね…。\n今回は、本命のツイートにリプライするまで！\n指定ツイートのリプライのstatus_idを取得 users/show.jsonでは、最新の1ツイートしか取得できないから、他の方法で、前のツイートまで取得する！\n指定ツイートのstatus_idを取得 https://syncer.jp/Web/API/Twitter/REST_API/GET/statuses/user_timeline/\nhttps://api.twitter.com/1.1/statuses/user_timeline.json\nこのへんでとれるかな…？\n1 2 3 4 5 6 7 8 9  def main(): response = requests.get( f\u0026#39;https://api.twitter.com/1.1/statuses/user_timeline.json?screen_name={SCREEN_NAME}\u0026#39;, auth=getOauth() ).json() print(json.dumps(response, ensure_ascii=False, indent=4))   うん、取れた\nさっきのstatusの中身が配列でかえってくるっぼい。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  [ { \u0026#34;created_at\u0026#34;: \u0026#34;Wed Feb 19 21:12:03 +0000 2020\u0026#34;, \u0026#34;id\u0026#34;: 1230238643068xxxxxx, \u0026#34;id_str\u0026#34;: \u0026#34;1230238643068xxxxxx\u0026#34;, \u0026#34;text\u0026#34;: \u0026#34;test \\n ※このツイートはbotからの自動ツイートです\u0026#34;, \u0026#34;truncated\u0026#34;: false, }, { \u0026#34;created_at\u0026#34;: \u0026#34;Wed Feb 19 20:54:10 +0000 2020\u0026#34;, \u0026#34;id\u0026#34;: 1230234142802xxxxxx, \u0026#34;id_str\u0026#34;: \u0026#34;1230234142802xxxxxx\u0026#34;, \u0026#34;text\u0026#34;: \u0026#34;test \\n ※このツイートはbotからの自動ツイートです\u0026#34;, \u0026#34;truncated\u0026#34;: false, }, { \u0026#34;created_at\u0026#34;: \u0026#34;Wed Feb 19 20:48:53 +0000 2020\u0026#34;, \u0026#34;id\u0026#34;: 1230232810620xxxxxx, \u0026#34;id_str\u0026#34;: \u0026#34;1230232810620xxxxxx\u0026#34;, \u0026#34;text\u0026#34;: \u0026#34;テスト\u0026#34;, }, ～略～   指定ツイートのリプライのstatus_idを取得 で、私がしたかったのは、私のツイートに対してのリプライに対しての、リプライwww\nなので、指定ツイートのリプライのstatus_idを取得する。\nGET statuses/show/:id - ツイートを個別に取得する\nこの辺かなー？\nhttps://api.twitter.com/1.1/statuses/show.json\n1 2 3 4  response = requests.get( f\u0026#39;https://api.twitter.com/1.1/statuses/show.json?id=1230223693969707008\u0026#39;, auth=getOauth() ).json()   だめだな\nさっきのstatusの中身が返ってくるだけだ。\nこっちか？\nGET statuses/mentions_timeline - メンションタイムラインを取得する\nhttps://api.twitter.com/1.1/statuses/mentions_timeline.json\n1 2 3 4  response = requests.get( f\u0026#39;https://api.twitter.com/1.1/statuses/mentions_timeline.json?count=20\u0026#39;, auth=getOauth() ).json()   きた！\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  [ { ～略～ \u0026#34;id\u0026#34;: 1230233631869xxxxxx, \u0026#34;id_str\u0026#34;: \u0026#34;1230233631869xxxxxx\u0026#34;, \u0026#34;text\u0026#34;: \u0026#34;@xx おはようございます\u0026#34;, ～略～ \u0026#34;user\u0026#34;: { ～略～ \u0026#34;name\u0026#34;: \u0026#34;twitter太郎\u0026#34;, \u0026#34;screen_name\u0026#34;: \u0026#34;twitter111\u0026#34;, ～略～ }, ～略～ }, { ～略～ \u0026#34;id\u0026#34;: 1230233631869xxxxxx, \u0026#34;id_str\u0026#34;: \u0026#34;1230233631869xxxxxx\u0026#34;, \u0026#34;text\u0026#34;: \u0026#34;@xx おはようございます\u0026#34;, ～略～ \u0026#34;user\u0026#34;: { ～略～ ～略～   対象ツイート向けのリプライのみにfillter でも、自分宛のリプライが問答無用で取得されるみたい。\nだから、ここで取得したリストから、対象のツイートへのリプライだけに絞り込まないといけない\nそしてどうやら自分あてのリプライは取得できないようだ…\nしょうがない。テスト用にサブ垢からリプライしておくか…。\nどのツイートに対してのリプライかは、in_reply_to_status_idで分かるみたいなので、in_reply_to_status_idが対象なもので絞る\n1 2 3 4 5 6  in_reply_to_status_id=1230223693969707008 response = requests.get( f\u0026#39;https://api.twitter.com/1.1/statuses/mentions_timeline.json?count=20\u0026#39;, auth=getOauth() ).json() response = list(filter(lambda x:x[\u0026#34;in_reply_to_status_id\u0026#34;] == in_reply_to_status_id,response))   リプライメッセージを作成 ○○さん、おはようございます！ ※このツイートはbotからの自動送信です とりあえず、こんなところだろうか？\n名前はさっきのresponseのuserのnameから取得できそうなので、やってみる。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14  #自分宛のリプライを全て取得 response = requests.get( f\u0026#39;https://api.twitter.com/1.1/statuses/mentions_timeline.json?count=20\u0026#39;, auth=getOauth() ).json() #その中から、指定した元ツイートに対してのリプライのみに絞り込む in_reply_to_status_id=1230223693969xxxxxx response = list(filter(lambda x:x[\u0026#34;in_reply_to_status_id\u0026#34;] == in_reply_to_status_id,response)) #一件ずつ、リプライメッセージを作成していく for r in response: message = f\u0026#39;{r[\u0026#34;user\u0026#34;][\u0026#34;name\u0026#34;]}さん、おはようございます！\\n※このツイートはbotからの自動送信です\u0026#39; print(f\u0026#39;replyMessage:{message}\u0026#39;)   replyMessage:twitter太郎さん、おはようございます！ ※このツイートはbotからの自動送信です replyMessage:twitter花子さん、おはようございます！ ※このツイートはbotからの自動送信です うん、よさげ。\nリプライする。 今までのを組み合わせる。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  #自分宛のリプライを全て取得 response = requests.get( f\u0026#39;https://api.twitter.com/1.1/statuses/mentions_timeline.json?count=20\u0026#39;, auth=getOauth() ).json() #その中から、指定した元ツイートに対してのリプライのみに絞り込む in_reply_to_status_id=1230223693969xxxxxx response = list(filter(lambda x:x[\u0026#34;in_reply_to_status_id\u0026#34;] == in_reply_to_status_id,response)) #リプライする for r in response: status = f\u0026#39;{r[\u0026#34;user\u0026#34;][\u0026#34;name\u0026#34;]}さん、おはようございます！\\n※このツイートはbotからの自動送信です\u0026#39; in_reply_to_status_id=r[\u0026#34;id\u0026#34;] response = requests.post( f\u0026#39;https://api.twitter.com/1.1/statuses/update.json\u0026#39;, data={\u0026#34;status\u0026#34;:status,\u0026#34;in_reply_to_status_id\u0026#34;:in_reply_to_status_id}, auth=getOauth() ).json()   { ～略～ \u0026quot;text\u0026quot;: \u0026quot;xxxxさん、おはようございます\\n※このツイートはbotからの自動送信です\u0026quot;, ～略～ \u0026quot;in_reply_to_status_id\u0026quot;: null, \u0026quot;in_reply_to_status_id_str\u0026quot;: null, \u0026quot;in_reply_to_user_id\u0026quot;: null, \u0026quot;in_reply_to_user_id_str\u0026quot;: null, \u0026quot;in_reply_to_screen_name\u0026quot;: null, \u0026quot;user\u0026quot;: { え？\nどうして？\nリプライが出来ない…。\nなんどやっても、ただのツイートになってしまう…。\nリプライが上手くいくと、in_reply_to_status_idに元ツイートのidが入るはず…。\n試しに、朝の記事のidで試すと上手くリプライできる。\nなんで？権限？\n自分へのリプライはできるけど、他人へのリプライはできないってこと…！？\nググったり、公式ドキュメントを読んだり…。\nここで1時間くらいかかった…。\nつらい戦いだった…。\n解決編は、また夜に。\n","description":"","id":7,"section":"posts","tags":["python","twitter"],"title":"twitter apiで特定ツイートの情報を取得 twitterBot②","uri":"https://encr.jp/blog/posts/20200220_lunch/"},{"content":"今日は自動リプライbot作ります！\n本当はwebhookで拾って、リプライするのがいいんだけど、さくっと作りたいので、10分起きに特定のツイート覗きに行って、そのツイートに新しいリプがついてたら、それにリプするって形で作ってみます。\nなかなかの文量になりそうで、まとめるの時間かかりそうなので、3本立てくらいでお送りしますww\nツイートしてみる まずは、ツイートしてみます！\n下準備 awsのlambdaで作ります。cloudWatchEventで10分起きに起動！\nうーん、お手軽ww\ntwitterApiはoauthっていう認証が必要なのと、request入ってる方が便利なので、その辺をlayersに固めていきます。\n今日はお手軽にdockerは使いません！使わなくてもいけるライブラリー達！\nmkdir layer/python cd layer/python pip install -t . requests pip install -t . requests_oauthlib で、cloudformationでデプロイします。\n初めての方…。\n説明なくてすみません。\n基本的に作業記録なもので…。\nリクエストあれば、今度別記事で、もっと詳細書きます！\ntmplate.yamlはこんな感じ\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48  AWSTemplateFormatVersion:\u0026#39;2010-09-09\u0026#39;Transform:\u0026#39;AWS::Serverless-2016-10-31\u0026#39;Description:apigw,lambda,layersandsqsParameters:Oauth1:Type:StringOauth2:Type:StringOauth3:Type:StringOauth4:Type:StringScreenName:Type:StringResources:twitterAutoReply:Type:\u0026#39;AWS::Serverless::Function\u0026#39;Properties:FunctionName:\u0026#39;twitter-auto-reply\u0026#39;Handler:lambda_function.lambda_handlerRuntime:python3.7CodeUri:src/twitterAutoReplyDescription:\u0026#39;twitter-auto-reply\u0026#39;Environment:Variables:OAUTH1:!Sub${Oauth1}OAUTH2:!Sub${Oauth2}OAUTH3:!Sub${Oauth3}OAUTH4:!Sub${Oauth4}SCREEN_NAME:!Sub${ScreenName}MemorySize:512Timeout:60Role:!Sub\u0026#39;arn:aws:iam::${AWS::AccountId}:role/service-role/slackBotRole\u0026#39;Tags:Env:devproject:twitterBotLayers:- !RefTwitterModulesLayerTwitterModulesLayer:Type:AWS::Serverless::LayerVersionProperties:Description:TwitterModulesLayerContentUri:./src/layerCompatibleRuntimes:- python3.7- python3.6  メインソース で、メインのソースはとりあえずこんな感じ\nhttps://api.twitter.com/1.1/statuses/update.json\n↑このtwitterのapiを叩くだけです！\n非公式だけど、このサイトのリファレンスが分かりやすい\nPOST statuses/update - ツイートを投稿する\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38  from requests_oauthlib import OAuth1Session, OAuth1 import requests import json import codecs import time import os OAUTH1 = os.environ[\u0026#39;OAUTH1\u0026#39;] OAUTH2 = os.environ[\u0026#39;OAUTH2\u0026#39;] OAUTH3 = os.environ[\u0026#39;OAUTH3\u0026#39;] OAUTH4 = os.environ[\u0026#39;OAUTH4\u0026#39;] SCREEN_NAME = os.environ[\u0026#39;SCREEN_NAME\u0026#39;] def getOauth(): return OAuth1(OAUTH1, OAUTH2, OAUTH3, OAUTH4) def main(): status = \u0026#34;test \\n※このツイートはbotからの自動ツイートです\u0026#34; response = requests.post( f\u0026#39;https://api.twitter.com/1.1/statuses/update.json\u0026#39;, data={\u0026#34;status\u0026#34;:status}, auth=getOauth() ).json() if \u0026#34;errors\u0026#34; in response: print(response) return def lambda_handler(event, context): try: main() except: import traceback traceback.print_exc()   デプロイ\n$xxにはそれぞれ変数設定してください！\naws cloudformation package --template-file ./template.yaml --s3-bucket $DEPLOY_BUCKET_DEV --output-template-file \u0026quot;./packaged.yaml\u0026quot; aws cloudformation deploy --template-file \u0026quot;./packaged.yaml\u0026quot; --stack-name $stack_name --parameter-overrides Oauth1=$OAUTH1 Oauth2=$OAUTH2 \\ $stack_name --parameter-overrides Oauth1=$OAUTH1 Oauth2=$OAUTH Oauth3=$OAUTH3 Oauth4=$OAUTH4 ScreenName=$SCREEN_NAME 実行 お手軽に画面から実行\nうん、よさそう。\nリプライしてみる 次は、リプライができるか試してみます\nリプライする時は、dataにツイートIDを追加します。\nツイートIDを取得 最新のツイートは個人のステータスから取得できたはず\nローカルの適当なpythonで取得\n1 2 3 4 5 6 7 8 9 10 11 12  def main(): response = requests.get( f\u0026#39;https://api.twitter.com/1.1/users/show.json?screen_name={SCREEN_NAME}\u0026#39;, auth=getOauth() ).json() print(json.dumps(response, ensure_ascii=False, indent=4)) if __name__ == \u0026#39;__main__\u0026#39;: main()   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  { ～略～ \u0026#34;status\u0026#34;: { \u0026#34;created_at\u0026#34;: \u0026#34;Wed Feb 19 20:54:10 +0000 2020\u0026#34;, \u0026#34;id\u0026#34;: 1230234142802xxxxxx, \u0026#34;id_str\u0026#34;: \u0026#34;1230234142802xxxxxx\u0026#34;, \u0026#34;text\u0026#34;: \u0026#34;test \\n ※このツイートはbotからの自動ツイートです\u0026#34;, \u0026#34;truncated\u0026#34;: false, \u0026#34;entities\u0026#34;: { \u0026#34;hashtags\u0026#34;: [], \u0026#34;symbols\u0026#34;: [], \u0026#34;user_mentions\u0026#34;: [], \u0026#34;urls\u0026#34;: [] }, ～略～ }, ～略～ }   リプライしてみる とりあえず固定で直指定。\n1 2 3 4 5  response = requests.post( f\u0026#39;https://api.twitter.com/1.1/statuses/update.json\u0026#39;, data={\u0026#34;status\u0026#34;:status,\u0026#34;in_reply_to_status_id\u0026#34;,1230234142802xxxxxx}, auth=getOauth() ).json()   うん、いい感じ\nちゃんと返信先も付いてる！\n続きはお昼\n","description":"","id":8,"section":"posts","tags":["python","twitter","lambda"],"title":"twitter apiでリプライ twitterBot①","uri":"https://encr.jp/blog/posts/20200220_morning/"},{"content":"adsenseが表示されない… 表示されるところもあるんだけど、ヘッダーとか、表示されない…。\nclomeでエラー確認 とりあえず、エラーを確認。\nサイズがないって言われてる？\nレスポンシブにしてるから、サイズの上限なくて怒られてるのかも？\nとりあえずサイズ固定にしてみる とりあえず、サイズ固定にしてみる。\n場所の確認 そもそも場所がいけなかったかも。\nそれぞれ見直す。\n1 2 3 4 5 6 7 8  {{ if .subtitle }} {{ range .subtitle }} \u0026lt;div class=\u0026#34;site-header__subtitle\u0026#34; style=\u0026#34;font-size: {{ $header.subtitleFontSize }}px; {{ with $header.subtitleColor }}color:{{ . }}{{ end }}\u0026#34; data-cursive=\u0026#34;{{ with $header.subtitleCursive }}{{ . }}{{ end }}\u0026#34;\u0026gt; {{ . }} {{ partial \u0026#34;google/adsense_small\u0026#34; . }} \u0026lt;/div\u0026gt; {{ end }} {{ end }}   ヘッダーはサブタイトルの中。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14  \u0026lt;ul class=\u0026#34;sidebar\u0026#34;\u0026gt; {{ partial \u0026#34;google/adsense_big\u0026#34; . }} {{ partial \u0026#34;search/site-search\u0026#34; . }} {{ partial \u0026#34;sidebar/custom-list\u0026#34; . }} {{ if and ($.Param \u0026#34;itemsPerCategory\u0026#34;) ($.Param \u0026#34;enableListSidebarTitles\u0026#34;) }} {{ range first ($.Param \u0026#34;itemsPerCategory\u0026#34;) .Pages }} \u0026lt;li class=\u0026#34;sidebar-recent\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;{{ .RelPermalink }}\u0026#34; class=\u0026#34;sidebar-recent__title p1\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; {{ end }} \u0026lt;hr class=\u0026#34;hr-fade sidebar-hr\u0026#34; /\u0026gt; {{ end }} \u0026lt;/ul\u0026gt;   1 2 3 4 5 6 7 8 9 10  \u0026lt;div class=\u0026#34;toc__flexbox\u0026#34; data-position=\u0026#34;{{ if $.Param \u0026#34;hideToc\u0026#34; }}absolute{{ else }}fixed{{ end }}\u0026#34;\u0026gt; {{ partial \u0026#34;google/adsense_big\u0026#34; . }} \u0026lt;h6 class=\u0026#34;toc__title\u0026#34;\u0026gt;{{ i18n \u0026#34;toc-label\u0026#34; }}\u0026lt;/h6\u0026gt; {{ if $.Param \u0026#34;enableTocSwitch\u0026#34; }} \u0026lt;label class=\u0026#34;switch\u0026#34;\u0026gt; \u0026lt;input id=\u0026#34;toggle-toc\u0026#34; aria-label=\u0026#34;Toggle TOC\u0026#34; type=\u0026#34;checkbox\u0026#34; {{ if $.Param \u0026#34;hideToc\u0026#34; }}{{ else }}checked{{ end }}\u0026gt; \u0026lt;span class=\u0026#34;slider round\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;/label\u0026gt; {{ end }} \u0026lt;/div\u0026gt;   サイドバーはそれぞれのdivの中\nビルドしてみる うん、よさそう。\nローカル実行だと、広告は表示されないのだー\n空白になってるから、多分表示されるはず！\nこれは単純にコードの場所の問題だったかもな…。\nよし、アップしよう。\nはみ出る… 固定サイズ駄目だったな…\n戻して寝よう…。\n今日の作業はおしまい。\n実はちょっとtwitterBotも進めてるから、明日アップしよー\n追記 いい感じ\n","description":"","id":9,"section":"posts","tags":["hugo","adsense"],"title":"adsenseがヘッダーに表示されないバグ修正","uri":"https://encr.jp/blog/posts/20200219_night/"},{"content":"先日adsenseに合格し、自動広告のみ設定しているのですが、ページビュー286に対し、広告表示数が66…。\n5回に一回しか表示すらされていないじゃないか…\nということで、ヘッダーやサイドバーに広告を追加していきたいと思います。\npcから見たページを確認 こんな感じ\nこの黄色い部分に広告を追加したい！\n広告ユニットを作成 adsenseのページでタグを取得\nここで、広告ユニットを作成します。「広告」⇒「広告ユニット」⇒「ディスプレイ広告」\n↓のマーク部分を設定し作成。\nすると、タグが表示されます。コピーしておきます。\n私はヘッダーように横長。サイドバー用にスクエア。の二つを作成しました。\nタグを設置 テーマの中にlayouts/partials/googleフォルダを作り、その中に新しいhtmlファイルを作成。\nその中にコピーしたタグを設置します。\nとりあえず、layouts/partials/google/adsense_big.htmlにスクエアを。\nlayouts/partials/google/adsense_small.htmlに横長を設置。\nタグの設置位置を確認 どこに追加すれば、いい感じに位置に入るのか、とりあえずいろんなところにpタグを追加して、確認してみる。\nいつかちゃんとまとめるかもしれないけど、今日は細かい調査結果は割愛。\nそろそろ仕事行かないとだし…\n結果だけ書きます。\ncustom-xx.htmlでは欲しい場所に入ってくれなかったので、直接本体を書き換えました。\nヘッダー\nlayouts/partials/header/header-text.html\nサイドバー(topページ)の頭\nlayouts/partials/sidebar/sidebar-home.html\nサイドバー(topページ)の真ん中\nlayouts/partials/sidebar/custom-home.html\nサイドバー(記事ページ)\nlayouts/partials/sidebar/sidebar-single.html\n↑のそれぞれのページに\n{{ partial \u0026quot;google/adsense_big\u0026quot; . }} を追加しました。(ヘッダーだけはsmall)\nお昼か夜にちゃんとまとめるかも！\nスマホ版の全画面広告を無効に 表示数稼ぐために設定してたけど、やっぱり、どう考えてもこれうざい！\nだから、消しました！\nこの全画面広告出ると、続き見る気なくなるもんね…ww\nここで消します。\nadsenseから、「広告」⇒「サイトごと」で、対象サイトを選択後、↓のチェックボックスを外します。\n独り言 よし、多分できた！\n仕事行ってきます！\n","description":"","id":10,"section":"posts","tags":["hugo","adsense"],"title":"pc版ブログにadsense広告を追加する！","uri":"https://encr.jp/blog/posts/20200219_morning/"},{"content":"前回の記事のアイキャッチがひどい… この文字化けかのごときurl…\nこの画像自動生成は、マークダウンの記事をそのまま出力してるからね…\nなので、単純な話だけど、urlのリンク([リンクの文字列](ページのリンク))と画像のリンク(![画像の名前](画像のリンク))を正規表現で置き換える。\n1 2 3 4 5  base_text = base_text.replace(\u0026#34;\\n\\n\u0026#34;, \u0026#34;\\n\u0026#34;) base_text = re.sub(\u0026#39;\\!\\[.+\\]\u0026#39;,\u0026#39;\u0026#39;,base_text) base_text = base_text.replace(\u0026#34;[\u0026#34;, \u0026#34;\u0026#34;) base_text = base_text.replace(\u0026#34;]\u0026#34;, \u0026#34;\u0026#34;) base_text = re.sub(\u0026#39;\\(.+\\)\u0026#39;,\u0026#39;\u0026#39;,base_text)   正規表現についてはこの辺を参考に。\nうん、まぁ、こんな感じかな？\n独り言 短いけど、今日はこれでおしまい。\n細かいけど、タグを追加した！\n記事のテンプレートも直した！\n1 2 3 4 5 6 7 8 9  --- title: \u0026#34;{{ replace .Name \u0026#34;-\u0026#34; \u0026#34; \u0026#34; | title }}\u0026#34; date: {{ .Date }} meta_image: \u0026#34;posts/meta_image/{{ replace .Name \u0026#34;-\u0026#34; \u0026#34; \u0026#34; | title }}.png\u0026#34; tags: [\u0026#34;hugo\u0026#34;,\u0026#34;python\u0026#34;,\u0026#34;twitter\u0026#34;,\u0026#34;aws\u0026#34;] categories: [\u0026#34;hugoブログ\u0026#34;,\u0026#34;lineBot\u0026#34;,\u0026#34;twitter api\u0026#34;,\u0026#34;メール\u0026#34;] draft: true ---   でも、タグ追加したら、タグにはクロール禁止付けておかないとな…\n明日やろう。\nいやぁ、やることほんとにたくさん…。\n","description":"","id":11,"section":"posts","tags":["python"],"title":"画像生成時にリンクを無視する　twitterカード画像自動生成⑦","uri":"https://encr.jp/blog/posts/20200218_night/"},{"content":"forkwellとは？ こちら の求人サイト。\n登録で2000円のアマゾンギフト券もらえたりします。\nポートフォリオの登録が出来て、そのポートフォリオをみた企業がスカウトを送ってきてくれるという素敵なサイトです。\nアマゾンギフト券欲しい方は、登録の上、この招待コードを入れてくれればww\n招待コード「GJJNYT」\nあとね、スカウトメールを受けて、面接とか見学とかで会社に行くと、一回1000円もらえる！\n今度、スカウトくれた会社めぐりしようかなーと企み中ww\nそれはさておき…。\nブログをアウトプットとして登録できる RSSがついているブログはアウトプットとして登録できるらしい。\nで、やってみた。\nだめっぽい\nRSSつけよう RSS付けよう！\nと思って、色々調べたら…\nなんと、zzoには標準でついているはず…\nでも、\n連携されない…\nこれはrss機能してないのでは？？\nRSSのアドレスを調べる フッターのボタンを押すと、エラーになって、「https://encr.jp/blog//index.xml」にアクセスしてるみたいなの…。\nなんでかね…。\nただ、//がまぁおかしいんだろうなって思って、「https://encr.jp/blog/index.xml」にアクセスしたら、xmlがありました。\nきっとリンクが間違ってるねー\n直したいけど、今はまずforkwell\nRSSのアドレスは「トップページ/index.xml」みたい。\nforkwellと連携 アドレス分かったから、トップページじゃなくて、直接xmlのアドレスを指定してみる。\nできた！\n技術的なこと何もしてないけど…\nご飯食べたら、↑のアドレス間違ってる問題の対応しましょうかねw\n","description":"","id":12,"section":"posts","tags":null,"title":"forkwellとこのブログを連携","uri":"https://encr.jp/blog/posts/20200218_morning/"},{"content":"このブログもだけど、ロリポップみたいなレンタルサーバーを借りてないので、メールサーバーも使えないのです。\nなので、メールもawsで受信してます。\nで、htmlメールが綺麗に受信できないので、対策しようかなと思っているところです。\n今日は、まずその前に、今の現状をまとめておこうと思います！\n構成 こんな感じ？\nシステム構成図とか仕事で書いたことないから書き方分からんww\nroute53で独自ドメインを設定して、SESで受信して、一応s3にバックアップ保存して、SNSのtopicに内容投げて、SQSがサブスクリプションして、lambdaに投げて、lambdaでメールの内容読み取って、SNSに送って、サブスクリプションで別のメールに転送してます。\n長い…ww\nメール読み取りlambda ソースはこんな感じ\nで、これだとhtmlメールが綺麗に受信できないのと、タイトルと宛先と受信元と…とかの情報が取れないのが今の課題…。\n明日からはこの辺をなんとかする！\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52  import json import email import boto3 def lambda_handler(event, context): # TODO implement print(json.dumps(event)) print(event[\u0026#34;Records\u0026#34;][0][\u0026#34;body\u0026#34;]) message = json.loads(event[\u0026#34;Records\u0026#34;][0][\u0026#34;body\u0026#34;]) # print(message[\u0026#34;content\u0026#34;]) try: print(email.message_from_string(message[\u0026#34;content\u0026#34;])) email_body = response[\u0026#39;Body\u0026#39;].read().decode(\u0026#39;utf-8\u0026#39;) except: email_body = message[\u0026#34;content\u0026#34;] email_object = email.message_from_string(email_body) # print(email_object) body = \u0026#34;\u0026#34; for part in email_object.walk(): # ContentTypeがmultipartの場合は実際のコンテンツはさらに # 中のpartにあるので読み飛ばす if part.get_content_maintype() == \u0026#39;multipart\u0026#39;: continue # ファイル名の取得 attach_fname = part.get_filename() # ファイル名がない場合は本文のはず if not attach_fname: charset = str(part.get_content_charset()) if charset: body += part.get_payload(decode=True).decode(charset, errors=\u0026#34;replace\u0026#34;) else: body += part.get_payload(decode=True) else: # ファイル名があるならそれは添付ファイル pass print(body) TOPIC_ARN = os.environ[\u0026#39;TOPIC_ARN\u0026#39;] client = boto3.client(\u0026#39;sns\u0026#39;) response = client.publish( TopicArn = TOPIC_ARN, Message = body, Subject = \u0026#34;メール受信\u0026#34; ) return { \u0026#39;statusCode\u0026#39;: 200 }   ","description":"","id":13,"section":"posts","tags":["python","aws"],"title":"awsでメールサーバーを立てる","uri":"https://encr.jp/blog/posts/20200217_night/"},{"content":"twitterカード画像自動生成機能は画像を自動生成するだけなので、各記事のheaderにmeta_imageを自力で設定しないといけなかった。\nそこもいい感じにしてくれるようにする。\nhugo newのカスタマイズ hugoでは\nhugo new xx.md とすることで、xxという記事のテンプレートが出来上がる。\nこのテンプレートの設定を変えてみる。\nテンプレートの作成元 テンプレートの作成元のベースになるのは\narchetypes/default.md\nというファイル\nデフォルトだと、こんな感じになっていると思う。\n1 2 3 4 5  --- title: \u0026#34;{{ replace .Name \u0026#34;-\u0026#34; \u0026#34; \u0026#34; | title }}\u0026#34; date: {{ .Date }} draft: true ---   この状態で、hugo newすると、こんなファイルが出来上がる。\n$ hugo new posts/test.md /mnt/c/github/runau/hugo/tweetBlog/content/posts/test.md created 1 2 3 4 5  --- title: \u0026#34;Test\u0026#34; date: 2020-02-17T17:21:17+09:00 draft: true ---   default.mdの{{}}にいい感じの値を埋め込んでくれているのがわかる。\nテンプレートの作成元の編集 ここに、meta_imageの記載を追加する。\n1 2 3 4 5 6  --- title: \u0026#34;{{ replace .Name \u0026#34;-\u0026#34; \u0026#34; \u0026#34; | title }}\u0026#34; date: {{ .Date }} meta_image: \u0026#34;posts/meta_image/{{ replace .Name \u0026#34;-\u0026#34; \u0026#34; \u0026#34; | title }}.png\u0026#34; draft: true ---   で、もう一度hugo new\n$ hugo new posts/test.md /mnt/c/github/runau/hugo/tweetBlog/content/posts/test.md created 1 2 3 4 5 6  --- title: \u0026#34;Test\u0026#34; date: 2020-02-17T17:21:17+09:00 meta_image: \u0026#34;posts/meta_image/Test.png\u0026#34; draft: true ---   できた。\nこれで、このまま記事を書いて、build.shを叩けば、アイキャッチが自動生成＆自動設定される。\ntwitterカード画像自動生成機能の残作業  アイキャッチ更新不要の場合はわざわざ作らない対応 微妙に左上が欠ける問題の解消  独り言 日本酒が飲み放題の夢の世界から帰ってきてしまいました…。\n現実に戻って、晩御飯作ります…。\nご飯食べたら、もうひと作業したいな…\n","description":"","id":14,"section":"posts","tags":["python"],"title":"hugo newのカスタマイズ　twitterカード画像自動生成機能⑥","uri":"https://encr.jp/blog/posts/20200217_lunch/"},{"content":"昨日作った画像生成スクリプトの残作業を進める\nビルドコマンドと昨日のスクリプトをshでラッピングする 指定したディレクトリ内のファイルに対して、画像生成スクリプトを回し、最後にビルドする。\nいつも忘れるシェルのループの書き方はこの辺を参考に。\nシェルスクリプトのforループでフォルダやファイルを一括処理\nで、作った！\n1 2 3 4 5 6 7 8 9 10 11 12 13  #!/bin/sh dir_path=\u0026#34;content/posts/*\u0026#34; dirs=`find $dir_path -maxdepth 0 -type f -name *.md` for dir in $dirs; do echo $dir python create_meta_image.py $dir done hugo -t zzo   create_meta_image.pyの修正 echo $dirのところ、パスが取れちゃって、\ncontent/posts/20200216_morning.md\nみたいな感じのが取れるから、shで正規表現で抽出するのめんどくさくて、pythonの方を修正。\n1 2 3 4 5  target = sys.argv[1] print(f\u0026#34;target:{target}\u0026#34;) target = target.split(\u0026#34;/\u0026#34;)[-1] target = target.replace(\u0026#34;.md\u0026#34;,\u0026#34;\u0026#34;)   これで、ディレクトリ付き(content/posts/20200216_morning.md)でも、なし(20200216_morning)でも、どっちでもいい感じに処理してくれるはずww\nで、このスクリプト回して、全記事のアイキャッチ更新して、\nはい、今日の朝活おわり！\n朝風呂言って来よう！せっかく温泉来てるしねww\n残作業  アイキャッチ更新不要の場合はわざわざ作らない対応 hugo newした時にmeta_imageを設定する  ","description":"","id":15,"section":"posts","tags":["python","bash"],"title":"画像生成スクリプトをビルド時に動かす　twitterカード画像自動生成機能⑤","uri":"https://encr.jp/blog/posts/20200217_morning/"},{"content":"朝作ったスクリプトをいい感じで自動で動かす方法を考える！\n朝の記事は こちら\n引数を渡す まずは、引数渡せるようにして、いい感じのファイルを作れるようにする。\nとりあえずファイル名を指定できるようにする。\nimport sys target = sys.argv[1] print(f\u0026quot;target:{target}\u0026quot;) で、\nimg.save(f\u0026quot;content/posts/meta_image/{target}.png\u0026quot;) これで、対象の記事に対してスクリプトが動く\ntargetのmdからタイトルと内容を取得 で、マークダウンを読み取る\nもしかしたら、もっといいベストプラクティスがあるのかもしれないけど…。\nとりあえず、テキストとして読み取って、ヘッダー部分をyamlとして読み込み直す\nこんな感じ？\nimport yaml with open(f'content/posts/{target}.md') as f: md = f.read().split(\u0026quot;---\u0026quot;) header_yaml = md[1] body = md[2] header = yaml.load(header_yaml) title = header[\u0026quot;title\u0026quot;] で、タイトルと、内容を取得\n引数に設定\n実行\nおおお！いいね\n完成(ㅅ´ ˘ `)♡\nちょっと細かいリファクタリングとか、バグ取りとかして、こんな感じ\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69  from PIL import ImageFont, ImageDraw, Image import sys import yaml def add_text_to_image(img, base_text, font_path, font_size, font_color, height, width, line=1, max_length=800, max_height=420): font = ImageFont.truetype(font_path, font_size) draw = ImageDraw.Draw(img) lineCnt = 1 base_text = base_text.strip() base_text = base_text.replace(\u0026#34;\\n\\n\u0026#34;, \u0026#34;\\n\u0026#34;) base_text = base_text[0:150] break_flg = False for lineCnt in range(line): text = base_text.split(\u0026#34;\\n\u0026#34;)[0] position = (width, height) if len(text) == 0: break if lineCnt == line - 1 or \\ height + draw.textsize(text, font=font)[1] \u0026gt; max_height: if draw.textsize(text, font=font)[0] \u0026gt; max_length: # テキストの長さがmax_lengthより小さくなるまで、1文字ずつ削っていく while draw.textsize(text + \u0026#39;…\u0026#39;, font=font)[0] \u0026gt; max_length: text = text[:-1] text = text + \u0026#39;…\u0026#39; break_flg = True else: while draw.textsize(text, font=font)[0] \u0026gt; max_length: text = text[:-1] base_text = base_text.replace(text, \u0026#34;\u0026#34;) base_text = base_text.strip() height = height + draw.textsize(text, font=font)[1] draw.text(position, text, font_color, font=font) print(f\u0026#34;draw:{text}\u0026#34;) if break_flg: break return img, height target = sys.argv[1] print(f\u0026#34;target:{target}\u0026#34;) with open(f\u0026#39;content/posts/{target}.md\u0026#39;) as f: md = f.read().split(\u0026#34;---\u0026#34;) header_yaml = md[1] body = md[2] header = yaml.load(header_yaml) title = header[\u0026#34;title\u0026#34;] base_img_path = \u0026#34;content/posts/meta_image/base.png\u0026#34; base_img = Image.open(base_img_path).copy() font_path = \u0026#34;content/posts/meta_image/meiryo.ttc\u0026#34; font_color = (88, 110, 117) height = 155 width = 30 font_size = 57 line = 3 img, height = add_text_to_image( base_img, title, font_path, font_size, font_color, height, width, line) font_size = 35 height = height + 20 line = 6 img, height = add_text_to_image( img, body, font_path, font_size, font_color, height, width, line) img.save(f\u0026#34;content/posts/meta_image/{target}.png\u0026#34;)   このまま投稿してみる！\n出来たヾ(●´∇｀●)ﾉ\n残タスク  今はmdのテキストをそのまま出力しているので、リンクの中身を臭力しないようにするとか♯をいい感じにするとか。 shでラッピングして、ビルド時にいい感じに自動生成するようにする。 既にイメージができている時は作りなおさずにスキップする  とか\nとりあえず、今日はこんなもん。\nよし、夜鳴きそば食べて来ようwww\n","description":"","id":16,"section":"posts","tags":["python","bash"],"title":"twitterカード画像自動生成機能を記事ごとに動かす　twitterカード画像自動生成機能④","uri":"https://encr.jp/blog/posts/20200216_lunch/"},{"content":"昨日あれから、寝る前にどうやるか、よく考えた。\nで、思った。\nどうせバッチっぽいの回すなら、jsでなくてよくね？？\nPythonで画像に文字描画 という事でPythonでできないか調べた\n「Python 画像 文字描画」とかで検索\nなんかね、簡単に出来そう！\nよーし、日曜日だし、これから越後湯沢に旅行だけど、気合い入れて作るぞー！！\n先人様がいらっしゃるので、参考にさせて頂く\nPythonで画像を編集したり、文字を入れたりする\nまずベースの画像を作って、文字を重ねる\nベースの画像は、とりあえずこんな感じでいいか？\nで、文字を描画してみる\nとりあえず、↑サイトから取ってきたコードのパスとかサイズとかだけ調整しただけのコードでお試し！\nと思ったけど、フォントファイルがない…\nよく分かんないから、もうネットで探すww\nここにあったのを拾う\nメイリオのフォントファイル\nで、適当において、パスを指定\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  from PIL import ImageFont,ImageDraw,Image def add_text_to_image(img, base_text, font_path, font_size, font_color, height, width,max_length=800): font = ImageFont.truetype(font_path, font_size) draw = ImageDraw.Draw(img) if draw.textsize(text, font=font)[0] \u0026gt; max_length: while draw.textsize(text + \u0026#39;…\u0026#39;, font=font)[0] \u0026gt; max_length: text = text[:-1] text = text + \u0026#39;…\u0026#39; return img title = \u0026#34;titlexxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\u0026#34; font_path = \u0026#34;content/posts/meta_image/meiryo.ttc\u0026#34; font_size = 57 font_color = (88, 110, 117) height = 155 width = 30 path = \u0026#34;content/posts/meta_image/base.png\u0026#34; base_img = Image.open(path).copy() img = add_text_to_image(base_img, title, font_path, font_size, font_color, height, width) img.save(\u0026#34;content/posts/img/create.png\u0026#34;)   うん、いい感じ\n指定行数まで折り返す どうやら、↑のサイトでは、長い文字は切り落としているみたい\nでも、長い文字は折り返したい！\nちょっとコード変更\nこれでlineに指定した行数分折り返してくれる\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36  from PIL import ImageFont,ImageDraw,Image def add_text_to_image(img, base_text, font_path, font_size, font_color, height, width, line,max_length=800): font = ImageFont.truetype(font_path, font_size) draw = ImageDraw.Draw(img) for lineCnt in range(line): print (lineCnt) text = base_text position = (width, height) if lineCnt == line: # テキストの長さがmax_lengthより小さくなるまで、1文字ずつ削っていく while draw.textsize(text + \u0026#39;…\u0026#39;, font=font)[0] \u0026gt; max_length: text = text[:-1] text = text + \u0026#39;…\u0026#39; else: while draw.textsize(text , font=font)[0] \u0026gt; max_length: text = text[:-1] base_text = base_text[1:] height = height + draw.textsize(text , font=font)[1] draw.text(position, text, font_color, font=font) return img title = \u0026#34;titlexxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\u0026#34; font_path = \u0026#34;content/posts/meta_image/meiryo.ttc\u0026#34; font_size = 57 font_color = (88, 110, 117) height = 155 width = 30 path = \u0026#34;content/posts/meta_image/base.png\u0026#34; base_img = Image.open(path).copy() line = 3 img = add_text_to_image(base_img, title, font_path, font_size, font_color, height, width, line) img.save(\u0026#34;content/posts/meta_image/create.png\u0026#34;)   実行\nこんな感じ\nうん、いい感じ\n内容もつくる さっきまで作ってたのはタイトル。\nでその下に、ちょっと文字を小さくして本文を入れたい！\nせっかく関数化してあるしね。もう一回呼び出すように変更。\nで、文字の高さの位置が変わるから、それもリターンするようにする。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50  from PIL import ImageFont, ImageDraw, Image def add_text_to_image(img, base_text, font_path, font_size, font_color, height, width, line=1, max_length=800): font = ImageFont.truetype(font_path, font_size) draw = ImageDraw.Draw(img) lineCnt = 1 for lineCnt in range(line): print(lineCnt) text = base_text position = (width, height) if lineCnt == line - 1: # テキストの長さがmax_lengthより小さくなるまで、1文字ずつ削っていく while draw.textsize(text + \u0026#39;…\u0026#39;, font=font)[0] \u0026gt; max_length: text = text[:-1] text = text + \u0026#39;…\u0026#39; else: while draw.textsize(text, font=font)[0] \u0026gt; max_length: text = text[:-1] base_text = base_text[1:] height = height + draw.textsize(text, font=font)[1] draw.text(position, text, font_color, font=font) return img, height title = \u0026#34;titlexxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\u0026#34; font_path = \u0026#34;/mnt/c/github/runau/hugo/tweetBlog/content/posts/meta_image/meiryo.ttc\u0026#34; font_size = 57 font_color = (88, 110, 117) height = 155 width = 30 path = \u0026#34;/mnt/c/github/runau/hugo/tweetBlog/content/posts/meta_image/base1.png\u0026#34; base_img = Image.open(path).copy() line = 2 img, height = add_text_to_image( base_img, title, font_path, font_size, font_color, height, width, line) title = \u0026#34;bodyxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\u0026#34; font_path = \u0026#34;/mnt/c/github/runau/hugo/tweetBlog/content/posts/meta_image/meiryo.ttc\u0026#34; font_size = 40 font_color = (88, 110, 117) height = height + 20 width = 30 path = \u0026#34;/mnt/c/github/runau/hugo/tweetBlog/content/posts/meta_image/base1.png\u0026#34; base_img = Image.open(path).copy() line = 5 img, height = add_text_to_image( img, title, font_path, font_size, font_color, height, width, line) img.save(\u0026#34;/mnt/c/github/runau/hugo/tweetBlog/content/posts/meta_image/create.png\u0026#34;)   実行\nこんな感じ\nうん、いいね。\n旅行出発の時間だ。\nこのバッチを呼び出すところとか、引数とかそういうのは次の作業で！\n","description":"","id":17,"section":"posts","tags":["python"],"title":"twitterカード自動生成機能作った　twitterカード画像自動生成機能③","uri":"https://encr.jp/blog/posts/20200216_morning/"},{"content":"朝の続き。\n朝活の後、カラオケオフ会に行ってきましたよw\nうん、やっぱり楽しい！\n歌、上手くなりたいなー…\nさて、twitterカードの画像を自動生成したいというお話。\n完成イメージの方針 大きく二つ\n スクショを取る 画像を作成する  どっちでもいいから、楽な方にしたいんだけど…\nとりあえず両方考える！\nスクショを撮る こんな感じ\nブログの画面をスクショして、画像にして、それをカードに設定したい！\npythonでライブラリあるみたいだから、動的サイトのスクレイピングの要領で、画面表示して、スクショ取ればいいみたい！\nできそう！だけど、lambdaでやるのは現実出来ではないかな…\nま、スクレイピング環境も作りたいから、合わせてecrで対応するのとかもよさげだけど…\nいったんやめよう\n画像を作成する こんな感じ\nキータはね、分かりやすいし可愛いよね\nこういうの作りたい！\nQiitaは imgix\nここでなんかしているらしい…\nでもね、これ、月額10ドルから…\n諦めよう…ww\nでも、なんでもよければ、実は前にワードプレスで作ったんだよね。\nアイキャッチ自動生成ツール\nもう、記事ごとのアイキャッチ設定するのが本当にめんどうだったから、記事投稿時に、タイトルとカテゴリから勝手にアイキャッチ作ってくれるの作ったの\nあれと同じ感じで作れるはず。\ncanvasに描画⇒pngに変換\n画像が作れれば何でもいいんだけれど、全く知らない技術より、一回やったことあるものの方が工数削減のはず！\nとりあえず、この方針で勧める。\nということで 画像作成の方向で…\nタイミング ワードプレスの時は記事保存時に動かしてたんだけど、今回はどうしたもんか…\n  記事書いた後、build前にローカルでshかなんかで作って埋め込む\n  build時に絡める\n  build後にローカルでshかなんかで作って埋め込む\n  s3put時にputイベントで作る\n  html読み込んだ時に作る？できるのか？\n  うむ。\nbuild時に絡めるは一番綺麗だろうけど、私には無理そうだから…\ns3put時にputイベントもなかなか楽しそうだけど…。\nでも一番楽なのは、ビルド前に何か動かすかな。\nとりあえず、その方向で考える\n何を作るか？   全記事を取得⇒画像がなかったら画像作成\n  ビルド時にmetaタグにそれぞれの画像を設定\n  metaタグは、ビルド時に生成されるから、なんとかいい感じの参照をしてくれるようにしないと。\nまずそこから試そう！\nmetaタグを記事ごとに設定 今は、twitterカードの画像は、params.tomlで設定されてて、全記事共通の画像しか参照できない。\nここを変える方法を考える。\nとりあえずmetaタグを設定しているmeta.htmlを眺める。\n………。\nうーん、goさっぱり分らん…。\ngoの勉強から始めなきゃダメなのか…？？\nで、よく分かんないけど、アイキャッチって記事ごとに設定したいもんだし、とりあえず記事のヘッダーに追加してみたw\n1 2 3 4 5  --- title: \u0026#34;Twitterカードの画像の自動生成機能を考える\u0026#34; date: 2020-02-15T19:00:55+09:00 meta_image: \u0026#34;meta_image/20200215_lunch.png\u0026#34; ---   そしたらいい感じにできたw\nわーい//\nそりゃそうだよね。記事ごとに設定しないといけないもんね。\n記事のヘッダーは、params.tomlを上書きする設定ってイメージなのかね。\n最後に いや、ほんと\nマークダウンでブログが書けるって素晴らしさねw\n同じ記事量でも、ワードプレスの時はもっと時間かかってたわー\n毎日3記事upとか、マークダウンだからこそ、できる技ですなwww\n次の記事で自動生成作る！\n","description":"","id":18,"section":"posts","tags":["python"],"title":"Twitterカードの画像の自動生成機能を考える　twitterカード画像自動生成機能②","uri":"https://encr.jp/blog/posts/20200215_lunch/"},{"content":"hugoのzzoでtwitterカードを設定する！ 今はこんな感じ…\n可愛くない…\n可愛くしたい！\nちなみに、twitter上にどう表示されるか？は以下のツールで確認できます！\ntwitter公式Card validator\n画像の自動生成とかしたいんだけど、長くなりそうだから、まずは固定の画像と固定のディスクリプションの追加。\n自動生成は午後にやろうー！\ntwitterカードの種類をラージに twitterカードには種類が4種類あって、ブログで使われるのは2種類\n Summary Card Summary Card with Large Image  細かいことはサルワカさんの↓の記事とか見てもらえればw\nこの人は本当にすごくてw\n3年前に初めてワードプレスでブログ書いた時からお世話になっているww\nサルワカさんブログ\nで、今はSummary Cardだけど、Summary Card with Large Imageにしたいのね。\ncustom-header 1 2  \u0026lt;meta name=\u0026#34;twitter:card\u0026#34; content=\u0026#34;summary_large_image\u0026#34;\u0026gt; \u0026lt;meta content=\u0026#34;@encr\u0026#34; name=\u0026#34;twitter:site\u0026#34; /\u0026gt;   とりあえず追加してみる\nビルドして、clomeで開いて、ソースを確認\nうん、大丈夫そう\nと思ったけど… 1 2 3 4 5 6 7 8 9 10 11 12 13 14  {{ with $.Param \u0026#34;contact\u0026#34; }}\u0026lt;meta name=\u0026#34;contact\u0026#34; content=\u0026#34;{{ . }}\u0026#34;\u0026gt;{{ end }} \u0026lt;meta property=\u0026#34;og:site_name\u0026#34; content=\u0026#34;{{ .Site.Title }}\u0026#34;\u0026gt; \u0026lt;meta property=\u0026#34;og:title\u0026#34; content=\u0026#34;{{ .Title }}\u0026#34;\u0026gt; \u0026lt;meta property=\u0026#34;og:url\u0026#34; content=\u0026#34;{{ .Permalink | absLangURL }}\u0026#34;\u0026gt; \u0026lt;meta property=\u0026#34;og:type\u0026#34; content=\u0026#34;{{ if .IsPage }}article{{ else }}website{{ end }}\u0026#34;\u0026gt; \u0026lt;meta property=\u0026#34;og:description\u0026#34; content=\u0026#34;{{ $.Param \u0026#34;description\u0026#34; }}\u0026#34;\u0026gt; {{ with $.Param \u0026#34;meta_image\u0026#34; }} \u0026lt;meta property=\u0026#34;og:image\u0026#34; content=\u0026#34;{{ . | absURL }}\u0026#34;\u0026gt; \u0026lt;meta property=\u0026#34;og:image:url\u0026#34; content=\u0026#34;{{ . | absURL }}\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;twitter:card\u0026#34; content=\u0026#34;summary_large_image\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;twitter:app:name:iphone\u0026#34; content=\u0026#34;{{ $.Site.Title }}\u0026#34;\u0026gt; \u0026lt;meta property=\u0026#34;twitter:title\u0026#34; content=\u0026#34;{{ $.Param \u0026#34;title\u0026#34; }}\u0026#34;\u0026gt; \u0026lt;meta property=\u0026#34;twitter:description\u0026#34; content=\u0026#34;{{ $.Param \u0026#34;description\u0026#34; }}\u0026#34;\u0026gt; {{ end }}   こんなのあった\nこれ、自力で頑張らなくてもいい奴だな…\nなんかよく分かんないけど、とりあえず\n{{ with $.Param \u0026ldquo;meta_image\u0026rdquo; }}\nに入って欲しいから、params.tomlにmeta_imageでも追加してみる？\n1  meta_image = true   テストビルドして実行\nできたw\nでもよく見ると、画像のアドレスがtrueだわw\nこれ、画像のパス設定するのねw\n画像追加する とりあえず、まずは適当な画像を用意。\nで、これを設定\n1  meta_image = \u0026#34;posts/img/meta-image.png\u0026#34;   よし、ビルドしてアップしてみよう\nよし！\nただ…。\nTwitterに貼ると変わらない…\n反映に時間かかる系かもしれないな。\nそう信じて、一日くらい様子見てみようか…\n次は画像の自動生成する！\n後日追記 1時間くらいしたら反映されました。\ntwitter公式Card validator\nを表示することで、反映が早くなるようです。\n早く反映したい場合は、↑ツールでtwitter上のキャッシュクリアをしてみてください！\n","description":"","id":19,"section":"posts","tags":["hugo"],"title":"Twitterカードの設定　twitterカード画像自動生成機能①","uri":"https://encr.jp/blog/posts/20200215_morning/"},{"content":"今日adsense対策しようと思って、とりあえず昨日の夜、無理やり広告タグ貼り付けて審査出すだけだしたんだけど、受かったよねww\n昔のブログは30記事近く書いてやっと審査通ったのに…\n技術ブログはなかなか丸かぶりな記事ないから、甘いのかな？w\nとりあえず、やったこととかまとめる\nhugoのzzoテーマでタグを貼る hugoはmdで記事を書いて、その記事からビルドでhtmlやらjsやらを自動生成してくれるという仕組み。\nさて、どこに何を書いたもんか…\nとなったんだけど、zzoは簡単な方法があった！\n少し、テーマの中身をいじることになる。\nlayouts/partialsの中にhtmlのパーツを置くことができるみたいなので、まず、adsenseのパーツを新規で作る\n1 2  \u0026lt;script async src=\u0026#34;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script data-ad-client=\u0026#34;ca-pub-xxxxxxxxxxxx\u0026#34; async src=\u0026#34;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;   xxxxxは自分のコードに変えてくださいね！\nで、そのパーツを呼び出す。\nzzoはよくできていて、custom-head.htmlに書くだけでいいみたい。\n他のテーマの場合は、っぽいことが書いてあるところに、同じように↓の記述を追加すればOK\n1 2 3  \u0026lt;!--override this file --\u0026gt; \u0026lt;!--Adsense --\u0026gt; {{ partial \u0026#34;google/adsense\u0026#34; . }}   で、ビルドするだけ！\n自動広告 自動広告は↑の記述さえしてしまえば、adsense側で設定するだけでいいから、これでおしまい！\n設定は、adsenseの管理画面⇒広告⇒該当サイトの右端の鉛筆マークでできます。\nただね、hugoは綺麗な自動広告入ってくれないみたい…\nスマホしか自動広告出なくて、\n私の大嫌いな画面全体の広告と、画面下の広告がでているよw\nでね、最近snowflake universityばっか見てたから、snowflakeの宣伝ばっかりwww\nとりあえず、しばらくはこのまま広告出しておくので、よかったら参考にして下さい！\n明日はほどよい感じで広告を入れるか、↑と同じ感じでcustum-headerで、twitterカードの設定をしたいな…\n","description":"","id":20,"section":"posts","tags":["adsense","hugo"],"title":"hugo/zzoブログでadsense審査通ったw","uri":"https://encr.jp/blog/posts/20200214_night/"},{"content":"実は昨日も頑張ったんだけど…。\nその続き\nhugo/zzoのタイトルとプロフィールを変更\nとりあえず、タイトルは表示されたんだけど、スマホだと見切れてしまうの…。\n絶対ダメでしょww\nカギはやっぱり、_index.mdだと思うんだよね。\n昨日いじっても、何も変化なかったし…。\nなので、こいつが効くまで頑張る！\nエラー 実はね、エラー出てたんだよね…。\n$ hugo server -D ERROR 2020/02/14 12:32:22 svType != tvType; key=hascjklanguage, st=bool, tt=string, sv=true, tv=true Built in 631 ms Error: Error building site: \u0026quot;/mnt/c/github/runau/hugo/tweetBlog/content/_index.md:19:1\u0026quot;: failed to unmarshal YAML: yaml: line 18: did not find expected key で、19行目以降削除したらエラー出なくなったから、ま、textしか使わないしいいか、と思ってたんだけど、\nだめなのかもな…。\nただのyamlの文法エラーかもしれない？\nvsCodeで確認 vscodeでyamlにして、エラー出ないか確認…\n別にでない…\npythonで確認 手軽にyaml読む方法、pythonしかわからんから、pythonで読んでみる。\nimport yaml yml = yaml.load(open(\u0026quot;/mnt/c/github/runau/hugo/tweetBlog/content/header:.yml\u0026quot;, 'r')) $ python Python 3.6.5 (default, Nov 14 2019, 22:52:14) [GCC 7.4.0] on linux Type \u0026quot;help\u0026quot;, \u0026quot;copyright\u0026quot;, \u0026quot;credits\u0026quot; or \u0026quot;license\u0026quot; for more information. \u0026gt;\u0026gt;\u0026gt; import yaml \u0026gt;\u0026gt;\u0026gt; yml = yaml.load(open(\u0026quot;/mnt/c/github/runau/hugo/tweetBlog/content/header:.yml\u0026quot;, 'r')) Traceback (most recent call last): File \u0026quot;\u0026lt;stdin\u0026gt;\u0026quot;, line 1, in \u0026lt;module\u0026gt; File \u0026quot;/home/lisa/.pyenv/versions/3.6.5/lib/python3.6/site-packages/yaml/__init__.py\u0026quot;, line 72, in load return loader.get_single_data() File \u0026quot;/home/lisa/.pyenv/versions/3.6.5/lib/python3.6/site-packages/yaml/constructor.py\u0026quot;, line 35, in get_single_data node = self.get_single_node() File \u0026quot;/home/lisa/.pyenv/versions/3.6.5/lib/python3.6/site-packages/yaml/composer.py\u0026quot;, line 36, in get_single_node document = self.compose_document() File \u0026quot;/home/lisa/.pyenv/versions/3.6.5/lib/python3.6/site-packages/yaml/composer.py\u0026quot;, line 55, in compose_document node = self.compose_node(None, None) File \u0026quot;/home/lisa/.pyenv/versions/3.6.5/lib/python3.6/site-packages/yaml/composer.py\u0026quot;, line 84, in compose_node node = self.compose_mapping_node(anchor) File \u0026quot;/home/lisa/.pyenv/versions/3.6.5/lib/python3.6/site-packages/yaml/composer.py\u0026quot;, line 133, in compose_mapping_node item_value = self.compose_node(node, item_key) File \u0026quot;/home/lisa/.pyenv/versions/3.6.5/lib/python3.6/site-packages/yaml/composer.py\u0026quot;, line 82, in compose_node node = self.compose_sequence_node(anchor) File \u0026quot;/home/lisa/.pyenv/versions/3.6.5/lib/python3.6/site-packages/yaml/composer.py\u0026quot;, line 110, in compose_sequence_node while not self.check_event(SequenceEndEvent): File \u0026quot;/home/lisa/.pyenv/versions/3.6.5/lib/python3.6/site-packages/yaml/parser.py\u0026quot;, line 98, in check_event self.current_event = self.state() File \u0026quot;/home/lisa/.pyenv/versions/3.6.5/lib/python3.6/site-packages/yaml/parser.py\u0026quot;, line 393, in parse_block_sequence_entry \u0026quot;expected \u0026lt;block end\u0026gt;, but found %r\u0026quot; % token.id, token.start_mark) yaml.parser.ParserError: while parsing a block collection in \u0026quot;/mnt/c/github/runau/hugo/tweetBlog/content/header:.yml\u0026quot;, line 2, column 5 expected \u0026lt;block end\u0026gt;, but found '?' in \u0026quot;/mnt/c/github/runau/hugo/tweetBlog/content/header:.yml\u0026quot;, line 3, column 5 \u0026gt;\u0026gt;\u0026gt; うん。怒られた。\nこれやな\nでも、公式サイトから取ってきただけなんだけどなーー\nしょうがない。yamlの勉強しよう\nyaml入門\nふむふむ。インデントか？\n直して再実行\n\u0026gt;\u0026gt;\u0026gt; yml = yaml.load(open(\u0026quot;/mnt/c/github/runau/hugo/tweetBlog/content/header:.yml\u0026quot;, 'r')) \u0026gt;\u0026gt;\u0026gt; 読めた。\n修正後ファイルはこちら\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97  --- header: - type: text height: 200 paddingX: 50 paddingY: 0 align: center title: - tweet blog// subtitle: - ツイート感覚で書く技術ブログ titleColor: # #123456, red titleShadow: false titleFontSize: 44 subtitleColor: # #123456, red subtitleCursive: true subtitleFontSize: 16 spaceBetweenTitleSubtitle: 20 - type: img imageSrc: images/header/background.jpg # your image file path: root/static/images/header/background.jpg imageSize: cover # auto|length|cover|contain|initial|inherit imageRepeat: no-repeat # repeat|repeat-x|repeat-y|no-repeat|initial|inherit imagePosition: center # x% y%| xpos ypos| left top| center bottom| ... height: 235 paddingX: 50 paddingY: 0 align: center title: - tweet blog// subtitle: - ツイート感覚で書く技術ブログ titleColor: titleShadow: false titleFontSize: 44 subtitleColor: subtitleCursive: false subtitleFontSize: 16 spaceBetweenTitleSubtitle: 20 - type: slide height: 235 options: startSlide: 0 auto: 5000 # auto slide delay 5000ms(5sec) draggable: true # slide draggable autoRestart: true # restart after drag finished continuous: true # last to first disableScroll: true stopPropagation: true slide: - paddingX: 50 paddingY: 0 align: left imageSrc: images/header/background.jpg imageSize: cover imageRepeat: no-repeat imagePosition: center title: - header title1 subtitle: - header subtitle1 titleFontSize: 44 subtitleFontSize: 16 spaceBetweenTitleSubtitle: 20 - paddingX: 50 paddingY: 0 align: center imageSrc: images/header/background.jpg imageSize: cover imageRepeat: no-repeat imagePosition: center title: - header title2 subtitle: - header subtitle2 titleFontSize: 44 subtitleFontSize: 16 spaceBetweenTitleSubtitle: 20 - paddingX: 50 paddingY: 0 align: right imageSrc: images/header/background.jpg imageSize: cover imageRepeat: no-repeat imagePosition: center title: - header title3 subtitle: - header subtitle3 titleFontSize: 44 subtitleFontSize: 16 spaceBetweenTitleSubtitle: 20 ---   ビルド再挑戦！ お、きた！\nヘッダーってそっちか！\n微修正して、ビルド＆デプロイ！\nはい、昼活おわり\n","description":"","id":21,"section":"posts","tags":["hugo"],"title":"hugo/zzoのカスタムヘッダーを設定","uri":"https://encr.jp/blog/posts/20200214_lunch/"},{"content":"adsenceやろうかと思ったんだけど、先にツイートブログのルール決めたくて考えたww\nツイートブログとは？ ツイート感覚で、適当に書くブログの事\n1記事3000文字。\nとか\n写真たくさん入れる。\nとか\n読者に読みやすく。\nとか\n導線が…。\nとか考えないで書くブログ\nTwitterでの作業報告の代わりに書くブログ\nこのルールを守ると、ツイート数/2が記事数になるはず！！\nツイートブログのルール タイミング   ブログ\n 朝昼晩    ツイート\n 朝昼晩ブログの前後    内容 作業前ツイート  前回作業の記事のリンクを貼って、今回の作業の予定を書く  作業後ツイート  今回記事のリンクを貼って、やり残したこと、次回やりたい事を書く  ブログ  やった事を書く やりたかった事が出来なくてもいい。やりきれなくてもいい  ルール  作業をしたら、必ず1記事あげる 作業をしながら書いていく 進まなかったら、なんで進まなかったのかを書く  何かを試していて時間がかかった 何かを調べていて時間がかかった   タイミングは3回あるけど、毎回やる必要はない。1日1回は必ずする。  こんな感じw\nまだ3日目だけど、フォロワーさん100人くらい増えたw\nお昼も頑張るー！\n","description":"","id":22,"section":"posts","tags":["twitter"],"title":"ツイートブログの決まり","uri":"https://encr.jp/blog/posts/20200214_morning/"},{"content":"zzoのヘッダーを変える いまはこんな感じ\nなぜかタイトルがzzo…\nタイトルとロゴくらいは変えないとねww\nHugo Themes customizing\n custom header\nYou may want to change home page header. There are 4 options which is slider, image, text, empty.\nSet param at config/_default/params.toml(homeHeaderType)\nMake _index.md file at root/content/_index.md and copy \u0026amp; paste below.\n params.tomlの設定と、content/_index.mdの追加をしていきます。\nparams.tomlの設定 ん？\n4つから選択？\ntextになってるから、そのままでいいのかな？\n# header homeHeaderType = \u0026quot;text\u0026quot; # text, img, slide content/_index.mdの追加？ --- header: - type: text height: 200 paddingX: 50 paddingY: 0 align: center title: - HUGO subtitle: - The world’s fastest framework for building websites titleColor: # #123456, red titleShadow: false titleFontSize: 44 subtitleColor: # #123456, red subtitleCursive: false subtitleFontSize: 16 spaceBetweenTitleSubtitle: 20 --- 直したけど…\n全く変わらずwww\nparams.tomlを色々変えてみる とりあえず、タイトルを直したいので、色々見てみる。\nこの辺かな？\n1 2 3 4  logoText = \u0026#34;Tweet Blog\u0026#34; # Logo text that appears in the site navigation bar. logoType = \u0026#34;short\u0026#34; # long, short -\u0026gt; short: squre shape includes logo text, long: rectangle shape not includes logo text logo = false #true # Logo that appears in the site navigation bar. description = \u0026#34;つぶやく感じで適当に書く技術ブログ\u0026#34; # for SEO   あと、この辺も。プロフィールも直したい！\n1 2 3 4 5 6 7 8 9  # whoami: usage - home page sidebar, single page bottom of post. all values can be empty myname = \u0026#34;るな\u0026#34; email = \u0026#34;blog@encr.jp\u0026#34; whoami = \u0026#34;エンジニア\u0026#34; bioImageUrl = \u0026#34;images/yui.jpg\u0026#34; # image url like \u0026#34;http//...\u0026#34; or \u0026#34;images/anyfoldername/mybioimage.jpg\u0026#34; If not set, we find a avatar image in root/static/images/whoami/avatar.(png|jpg|svg) useGravatar = false # we use this option highest priority location = \u0026#34;東京\u0026#34; organization = \u0026#34;エンジョイクリエイト\u0026#34; link = \u0026#34;https://encr.jp\u0026#34;   画像はstaticにimagesフォルダを作って、そこに設置。\nあと、おまけで、defaultのカラー変えた。\n1  themeOptions = [\u0026#34;dark\u0026#34;, \u0026#34;light\u0026#34;, \u0026#34;hacker\u0026#34;, \u0026#34;solarized\u0026#34;, \u0026#34;kimbie\u0026#34;] # select options for site color theme   を\n1  themeOptions = [\u0026#34;solarized\u0026#34;, \u0026#34;light\u0026#34;, \u0026#34;hacker\u0026#34;, \u0026#34;dark\u0026#34;, \u0026#34;kimbie\u0026#34;] # select options for site color theme   にかえた。defaultは一個目みたい。\n結果 変わった！\n明日はadsenseの設置頑張りたいなーー\n","description":"","id":23,"section":"posts","tags":["hugo"],"title":"hugo/zzoのタイトルとプロフィールを変更","uri":"https://encr.jp/blog/posts/20200213_night/"},{"content":"とりあえずzzo動くようになったけど、プロフィールとかもテンプレのままなので、修正する\nfavicon設定 まず、favicon変える。\nせっかく作ってもらったからね！使いたい♡\nHugo Themes favicon\n言われた通りに設定していく。\n朝は気づかなかったけど、こんなに分かりやすい公式ページがあったみたいww\n If you want to support mobile favicon, use favicon-generator.\nMake favicons from favicon-generator site.\nMake a folder at root/static/favicon\nUnzip the generated favicon to that folder.\nSet the config param useFaviconGenerator to true\n favicon自体は別で既に作ってあるんだけど…。\nとりあえず言うとおりにする。\nfavicon作る 広告たくさんで、ダウンロードボタンが分かりずらいけど、ここ。\nfavicon設置 フォルダ作って、そこにいれる\ncd static mkdir favicon わお、いっぱいできてるww\nこれは、ちゃんとここで作らないとだめだwww\nfavicon設定 で、設定。\nuseFaviconGeneratorをtrueにしろと。\n1 2 3 4 5 6 7  ～略 description = \u0026#34;The Zzo theme for Hugo example site.\u0026#34; # for SEO custom_css = [] # custom_css = [\u0026#34;scss/custom.scss\u0026#34;] and then make file at root/assets/scss/custom.scss custom_js = [] # custom_js = [\u0026#34;js/custom.js\u0026#34;] and then make file at root/assets/js/custom.js useFaviconGenerator = true languagedir = \u0026#34;ltr\u0026#34; # ltr / rtl ～略   できた。\nあれ、怒られたwタイプミスwwww\n$ hugo server -D ERROR 2020/02/13 12:40:00 svType != tvType; key=hascjklanguage, st=bool, tt=string, sv=true, tv=true Error: \u0026quot;/mnt/c/github/runau/hugo/tweetBlog/config/_default/params.toml:7:1\u0026quot;: unmarshal failed: Near line 7 (last key parsed 'useFaviconGenerator'): expected value but found \u0026quot;ture\u0026quot; instead もっかいw\n起動！\nできた！\nでも、ほんとにfaviconだけかい！\nヘッダーは変わらないのね…\nヘッダー設定 ロゴも変えたいし、タイトルも変えたい。\n1  title = \u0026#34;つぶやく感じで適当に書く技術ブログ\u0026#34;   タイトル設定してるのに、なぜかzzo…\nなんでや…\nこれか？\nカスタムヘッダーか？\nHugo Themes customizing\n custom header\nYou may want to change home page header. There are 4 options which is slider, image, text, empty.\nSet param at config/_default/params.toml(homeHeaderType)\nMake _index.md file at root/content/_index.md and copy \u0026amp; paste below.\n params.tomlの設定と、content/_index.mdの追加な\n夜にやろう…\n","description":"","id":24,"section":"posts","tags":["hugo"],"title":"hugo/zzoに独自のfaviconを設定","uri":"https://encr.jp/blog/posts/20200213_lunch/"},{"content":"ワードプレスもそうだけど、色々テンプレデザインが落ちてるのはいいよねww\nanankeいいんだけど、もう少しおしゃれにしたいから、可愛いのに変えていく！\nブログっぽくて、多少のカスタマイズが効きそうなものを探すことにした。\nここから好きなデザインを探す！ hugo公式サイトのデザイン集\nzzo この、ザ、ブログって感じのを選択！\nhugo-theme-zzo\n設定方法 とりあえず、何も考えずにthemesの中にclone\ncd themes git clone https://github.com/zzossig/hugo-theme-zzo.git エラー続出…。 むぅ…。\nBuilding sites … ERROR 2020/02/13 07:48:06 render of \u0026quot;home\u0026quot; failed: \u0026quot;/mnt/c/github/runau/hugo/tweetBlog/themes/hugo-theme-zzo/layouts/_default/baseof.html:17:33\u0026quot;: execute of template failed: template: index.html:17:33: executing \u0026quot;index.html\u0026quot; at \u0026lt;index .Site.Params.themeOptions 0\u0026gt;: error calling index: index of untyped nil ERROR 2020/02/13 07:48:06 render of \u0026quot;page\u0026quot; failed: \u0026quot;/mnt/c/github/runau/hugo/tweetBlog/themes/hugo-theme-zzo/layouts/_default/baseof.html:17:33\u0026quot;: execute of template failed: template: _default/single.html:17:33: executing \u0026quot;_default/single.html\u0026quot; at \u0026lt;index .Site.Params.themeOptions 0\u0026gt;: error calling index: index of untyped nil ERROR 2020/02/13 07:48:06 render of \u0026quot;page\u0026quot; failed: \u0026quot;/mnt/c/github/runau/hugo/tweetBlog/themes/hugo-theme-zzo/layouts/_default/baseof.html:17:33\u0026quot;: execute of template failed: template: _default/single.html:17:33: executing \u0026quot;_default/single.html\u0026quot; at \u0026lt;index .Site.Params.themeOptions 0\u0026gt;: error calling index: index of untyped nil ERROR 2020/02/13 07:48:06 render of \u0026quot;page\u0026quot; failed: \u0026quot;/mnt/c/github/runau/hugo/tweetBlog/themes/hugo-theme-zzo/layouts/_default/baseof.html:17:33\u0026quot;: execute of template failed: template: _default/single.html:17:33: executing \u0026quot;_default/single.html\u0026quot; at \u0026lt;index .Site.Params.themeOptions 0\u0026gt;: error calling index: index of untyped nil Built in 11327 ms Error: Error building site: failed to render pages: render of \u0026quot;section\u0026quot; failed: \u0026quot;/mnt/c/github/runau/hugo/tweetBlog/themes/hugo-theme-zzo/layouts/_default/baseof.html:17:33\u0026quot;: execute of template failed: template: _default/list.html:17:33: executing \u0026quot;_default/list.html\u0026quot; at \u0026lt;index .Site.Params.themeOptions 0\u0026gt;: error calling index: index of untyped nil うーん、とりあえず、サブモジュールにしてみる？ git submodule add https://github.com/zzossig/hugo-theme-zzo.git themes/zzo でも変わらず…。\nなんか、カスタマイズが必要系のテーマはconfig的な設定をしないと動かないよう。\nconfigファイルを作る https://zzodocs.netlify.com/docs/configuration/configfiles/\nこの辺の設定してみる。\n動いたみたい。\n$ hugo server -D ERROR 2020/02/13 08:34:46 svType != tvType; key=hascjklanguage, st=bool, tt=string, sv=true, tv=true | EN | KO -------------------+----+----- Pages | 26 | 13 Paginator pages | 0 | 0 Non-page files | 1 | 0 Static files | 70 | 70 Processed images | 0 | 0 Aliases | 3 | 1 Sitemaps | 2 | 1 Cleaned | 0 | 0 Built in 9647 ms Watching for changes in /mnt/c/github/runau/hugo/tweetBlog/{archetypes,content,data,layouts,static,themes} Watching for config changes in /mnt/c/github/runau/hugo/tweetBlog/config.toml, /mnt/c/github/runau/hugo/tweetBlog/config/_default Environment: \u0026quot;development\u0026quot; Serving pages from memory Running in Fast Render Mode. For full rebuilds on change: hugo server --disableFastRender Web Server is available at http://localhost:1313/ (bind address 127.0.0.1) Press Ctrl+C to stop ちょっと色々設定変えなきゃいけなそうだけど、それはまたお昼に\nとりあえず、前のバックアップも上げっぱなし\nanankeバージョン\n","description":"","id":25,"section":"posts","tags":["hugo"],"title":"hugoのテーマをzzoに変えてみる","uri":"https://encr.jp/blog/posts/20200213_morning/"},{"content":"バイトメンター.com 今度linebotのハンズオン勉強会しようかな。と思って、何作ろうかなーと思ってたら、これ作りたくなった！\n頑張って作るぞー！\nバイトメンター.comとは？ アプリから誰でも簡単にお助けメンターを呼び出せるという、画期的なサービスですww\n元ネタはこちらww\n龍が如く7　バイトヒーロー.com　始動\nシステム構成 画像埋め込むの大変だったから、今日はここまで…w\n埋め込み方法は、ここを参考にしました。\nhttps://hugo.nakaken88.com/use/image/\n","description":"","id":26,"section":"posts","tags":["aws"],"title":"バイトメンター.com","uri":"https://encr.jp/blog/posts/20200212_night/"},{"content":"hugo初期設定との戦い ミスドランチをしながら、30分で頑張る！\n記事出てこない問題 hugo new posts/20200212_morning.md して、記事ページは作られてるんだけど、\nhugo server -D すると、ちゃんと記事出てくるんだけど、\nhugo -t ananke デプロイすると、記事がない…\ndraft: true 記事ページのヘッダーにこいつがいたせいだった。\n下書きって意味らしく、これが付いていると、デプロイされないらしい！便利！\ncssとか反映されない問題 なんとかデプロイしたけど、cssとか、全く効いてない。\nなんならリンクも効いてない。\nデプロイ後のソース覗くと、リンク先がこんなのになってる…\nhttp://hugo.example.com/posts/xxxxx\n1  baseURL = \u0026#34;https://encr.jp/blog\u0026#34;   個々の設定しないといけないみたい。\n無事cssもきれいに表示\nついでにタイトルとかも変える！ 1 2 3 4 5  baseURL = \u0026#34;https://encr.jp/blog\u0026#34; languageCode = \u0026#34;en-us\u0026#34; title = \u0026#34;つぶやく感じで適当に書く技術ブログ\u0026#34; theme = \u0026#34;ananke\u0026#34; hasCJKLanguage = \u0026#34;true\u0026#34;   SEOのために、トップページへのリンク張る フッダーあたりがいいなー\nと思ったけど、これ、カスタマイズ扱いになってしまうのね…。\n本腰入れてやらないと無理かね？\nやりたいことリストに入れておこ\nとりあえず、google先生にクロールだけでもしてほしいから、リンク貼っておこww\nエンクリ\n","description":"","id":27,"section":"posts","tags":["hugo"],"title":"hugo初期設定と戦ってみる","uri":"https://encr.jp/blog/posts/20200212_lunch/"},{"content":"ブログ作った Twitterで今日の積み上げとかやるけど、残らないし、twitterだと細かいこと書けないし、ブログにした\nやった事とか、困ったこととか、ツイート感覚で書いていこうと思う！\nhugoって？ ブログを静的に作れるすごい奴\nしかも、記事をマークダウンで書ける！\n作り方 https://dev.classmethod.jp/cloud/hugo-s3/\nこれをそのままやった\n一部こっちも見ている。\nhttps://dev.classmethod.jp/etc/hugo-super-fast-static-webpage/\nテーマはhugo-unoは上手く動かなかったから、こっちのananke使ってみた\ns3からcloudfrontでroute53で独自ドメインで表示してる。\nこの辺を詳しく書こうとすると、記事アップのハードル上がるから、今回は書かないw\nさ、お風呂入って、会社行こ\n","description":"","id":28,"section":"posts","tags":["hugo"],"title":"hugoでつぶやきブログ作った","uri":"https://encr.jp/blog/posts/20200212_morning/"}]